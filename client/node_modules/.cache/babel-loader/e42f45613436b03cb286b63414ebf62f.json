{"ast":null,"code":"/*!\n* DOMMatrix v1.0.3 (https://thednp.github.io/dommatrix/)\n* Copyright 2022 © thednp\n* Licensed under MIT (https://github.com/thednp/DOMMatrix/blob/master/LICENSE)\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.CSSMatrix = factory());\n})(this, function () {\n  'use strict'; // DOMMatrix Static methods\n  // * `fromArray` is a more simple implementation, should also accept Float[32/64]Array;\n  // * `fromMatrix` load values from another CSSMatrix/DOMMatrix instance or JSON object;\n  // * `fromString` parses and loads values from any valid CSS transform string (TransformList).\n\n  /**\n   * Creates a new mutable `CSSMatrix` instance given an array of 16/6 floating point values.\n   * This static method invalidates arrays that contain non-number elements.\n   *\n   * If the array has six values, the result is a 2D matrix; if the array has 16 values,\n   * the result is a 3D matrix. Otherwise, a TypeError exception is thrown.\n   *\n   * @param {CSSM.matrix | CSSM.matrix3d} array an `Array` to feed values from.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n  function fromArray(array) {\n    var m = new CSSMatrix();\n    var a = Array.from(array);\n\n    if (!a.every(function (n) {\n      return !Number.isNaN(n);\n    })) {\n      throw TypeError(\"CSSMatrix: \\\"\" + array + \"\\\" must only have numbers.\");\n    }\n\n    if (a.length === 16) {\n      var m11 = a[0];\n      var m12 = a[1];\n      var m13 = a[2];\n      var m14 = a[3];\n      var m21 = a[4];\n      var m22 = a[5];\n      var m23 = a[6];\n      var m24 = a[7];\n      var m31 = a[8];\n      var m32 = a[9];\n      var m33 = a[10];\n      var m34 = a[11];\n      var m41 = a[12];\n      var m42 = a[13];\n      var m43 = a[14];\n      var m44 = a[15];\n      m.m11 = m11;\n      m.a = m11;\n      m.m21 = m21;\n      m.c = m21;\n      m.m31 = m31;\n      m.m41 = m41;\n      m.e = m41;\n      m.m12 = m12;\n      m.b = m12;\n      m.m22 = m22;\n      m.d = m22;\n      m.m32 = m32;\n      m.m42 = m42;\n      m.f = m42;\n      m.m13 = m13;\n      m.m23 = m23;\n      m.m33 = m33;\n      m.m43 = m43;\n      m.m14 = m14;\n      m.m24 = m24;\n      m.m34 = m34;\n      m.m44 = m44;\n    } else if (a.length === 6) {\n      var M11 = a[0];\n      var M12 = a[1];\n      var M21 = a[2];\n      var M22 = a[3];\n      var M41 = a[4];\n      var M42 = a[5];\n      m.m11 = M11;\n      m.a = M11;\n      m.m12 = M12;\n      m.b = M12;\n      m.m21 = M21;\n      m.c = M21;\n      m.m22 = M22;\n      m.d = M22;\n      m.m41 = M41;\n      m.e = M41;\n      m.m42 = M42;\n      m.f = M42;\n    } else {\n      throw new TypeError('CSSMatrix: expecting an Array of 6/16 values.');\n    }\n\n    return m;\n  }\n  /**\n   * Creates a new mutable `CSSMatrix` instance given an existing matrix or a\n   * `DOMMatrix` instance which provides the values for its properties.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m the source matrix to feed values from.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function fromMatrix(m) {\n    var keys = Object.keys(new CSSMatrix());\n\n    if (typeof m === 'object' && keys.every(function (k) {\n      return k in m;\n    })) {\n      return fromArray([m.m11, m.m12, m.m13, m.m14, m.m21, m.m22, m.m23, m.m24, m.m31, m.m32, m.m33, m.m34, m.m41, m.m42, m.m43, m.m44]);\n    }\n\n    throw TypeError(\"CSSMatrix: \\\"\" + JSON.stringify(m) + \"\\\" is not a DOMMatrix / CSSMatrix / JSON compatible object.\");\n  }\n  /**\n   * Creates a new mutable `CSSMatrix` given any valid CSS transform string,\n   * or what we call `TransformList`:\n   *\n   * * `matrix(a, b, c, d, e, f)` - valid matrix() transform function\n   * * `matrix3d(m11, m12, m13, ...m44)` - valid matrix3d() transform function\n   * * `translate(tx, ty) rotateX(alpha)` - any valid transform function(s)\n   *\n   * @copyright thednp © 2021\n   *\n   * @param {string} source valid CSS transform string syntax.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function fromString(source) {\n    if (typeof source !== 'string') {\n      throw TypeError(\"CSSMatrix: \\\"\" + source + \"\\\" is not a string.\");\n    }\n\n    var str = String(source).replace(/\\s/g, '');\n    var m = new CSSMatrix();\n    var invalidStringError = \"CSSMatrix: invalid transform string \\\"\" + source + \"\\\"\"; // const px = ['perspective'];\n    // const length = ['translate', 'translate3d', 'translateX', 'translateY', 'translateZ'];\n    // const deg = ['rotate', 'rotate3d', 'rotateX', 'rotateY', 'rotateZ', 'skew', 'skewX', 'skewY'];\n    // const abs = ['scale', 'scale3d', 'matrix', 'matrix3d'];\n    // const transformFunctions = px.concat(length, deg, abs);\n\n    str.split(')').filter(function (f) {\n      return f;\n    }).forEach(function (tf) {\n      var ref = tf.split('(');\n      var prop = ref[0];\n      var value = ref[1]; // invalidate empty string\n\n      if (!value) {\n        throw TypeError(invalidStringError);\n      }\n\n      var components = value.split(',').map(function (n) {\n        return n.includes('rad') ? parseFloat(n) * (180 / Math.PI) : parseFloat(n);\n      });\n      var x = components[0];\n      var y = components[1];\n      var z = components[2];\n      var a = components[3];\n      var xyz = [x, y, z];\n      var xyza = [x, y, z, a]; // single number value expected\n\n      if (prop === 'perspective' && x && [y, z].every(function (n) {\n        return n === undefined;\n      })) {\n        m.m34 = -1 / x; // 6/16 number values expected\n      } else if (prop.includes('matrix') && [6, 16].includes(components.length) && components.every(function (n) {\n        return !Number.isNaN(+n);\n      })) {\n        var values = components.map(function (n) {\n          return Math.abs(n) < 1e-6 ? 0 : n;\n        }); // @ts-ignore -- conditions should suffice\n\n        m = m.multiply(fromArray(values)); // 3 values expected\n      } else if (prop === 'translate3d' && xyz.every(function (n) {\n        return !Number.isNaN(+n);\n      })) {\n        m = m.translate(x, y, z); // single/double number value(s) expected\n      } else if (prop === 'translate' && x && z === undefined) {\n        m = m.translate(x, y || 0, 0); // all 4 values expected\n      } else if (prop === 'rotate3d' && xyza.every(function (n) {\n        return !Number.isNaN(+n);\n      }) && a) {\n        m = m.rotateAxisAngle(x, y, z, a); // single value expected\n      } else if (prop === 'rotate' && x && [y, z].every(function (n) {\n        return n === undefined;\n      })) {\n        m = m.rotate(0, 0, x); // 3 values expected\n      } else if (prop === 'scale3d' && xyz.every(function (n) {\n        return !Number.isNaN(+n);\n      }) && xyz.some(function (n) {\n        return n !== 1;\n      })) {\n        m = m.scale(x, y, z); // single value expected\n      } else if (prop === 'scale' && !Number.isNaN(x) && x !== 1 && z === undefined) {\n        var nosy = Number.isNaN(+y);\n        var sy = nosy ? x : y;\n        m = m.scale(x, sy, 1); // single/double value expected\n      } else if (prop === 'skew' && (x || !Number.isNaN(x) && y) && z === undefined) {\n        m = m.skew(x, y || 0);\n      } else if (/[XYZ]/.test(prop) && x && [y, z].every(function (n) {\n        return n === undefined;\n      }) // a single value expected\n      && ['translate', 'rotate', 'scale', 'skew'].some(function (p) {\n        return prop.includes(p);\n      })) {\n        if (['skewX', 'skewY'].includes(prop)) {\n          // @ts-ignore unfortunately\n          m = m[prop](x);\n        } else {\n          var fn = prop.replace(/[XYZ]/, '');\n          var axis = prop.replace(fn, '');\n          var idx = ['X', 'Y', 'Z'].indexOf(axis);\n          var def = fn === 'scale' ? 1 : 0;\n          var axeValues = [idx === 0 ? x : def, idx === 1 ? x : def, idx === 2 ? x : def]; // @ts-ignore unfortunately\n\n          m = m[fn].apply(m, axeValues);\n        }\n      } else {\n        throw TypeError(invalidStringError);\n      }\n    });\n    return m;\n  }\n  /**\n   * Returns an *Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m the source matrix to feed values from.\n   * @param {boolean=} is2D *Array* representation of the matrix\n   * @return {CSSM.matrix | CSSM.matrix3d} an *Array* representation of the matrix\n   */\n\n\n  function toArray(m, is2D) {\n    if (is2D) {\n      return [m.a, m.b, m.c, m.d, m.e, m.f];\n    }\n\n    return [m.m11, m.m12, m.m13, m.m14, m.m21, m.m22, m.m23, m.m24, m.m31, m.m32, m.m33, m.m34, m.m41, m.m42, m.m43, m.m44];\n  } // Transform Functions\n  // https://www.w3.org/TR/css-transforms-1/#transform-functions\n\n  /**\n   * Creates a new `CSSMatrix` for the translation matrix and returns it.\n   * This method is equivalent to the CSS `translate3d()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d\n   *\n   * @param {number} x the `x-axis` position.\n   * @param {number} y the `y-axis` position.\n   * @param {number} z the `z-axis` position.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function Translate(x, y, z) {\n    var m = new CSSMatrix();\n    m.m41 = x;\n    m.e = x;\n    m.m42 = y;\n    m.f = y;\n    m.m43 = z;\n    return m;\n  }\n  /**\n   * Creates a new `CSSMatrix` for the rotation matrix and returns it.\n   *\n   * http://en.wikipedia.org/wiki/Rotation_matrix\n   *\n   * @param {number} rx the `x-axis` rotation.\n   * @param {number} ry the `y-axis` rotation.\n   * @param {number} rz the `z-axis` rotation.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function Rotate(rx, ry, rz) {\n    var m = new CSSMatrix();\n    var degToRad = Math.PI / 180;\n    var radX = rx * degToRad;\n    var radY = ry * degToRad;\n    var radZ = rz * degToRad; // minus sin() because of right-handed system\n\n    var cosx = Math.cos(radX);\n    var sinx = -Math.sin(radX);\n    var cosy = Math.cos(radY);\n    var siny = -Math.sin(radY);\n    var cosz = Math.cos(radZ);\n    var sinz = -Math.sin(radZ);\n    var m11 = cosy * cosz;\n    var m12 = -cosy * sinz;\n    m.m11 = m11;\n    m.a = m11;\n    m.m12 = m12;\n    m.b = m12;\n    m.m13 = siny;\n    var m21 = sinx * siny * cosz + cosx * sinz;\n    m.m21 = m21;\n    m.c = m21;\n    var m22 = cosx * cosz - sinx * siny * sinz;\n    m.m22 = m22;\n    m.d = m22;\n    m.m23 = -sinx * cosy;\n    m.m31 = sinx * sinz - cosx * siny * cosz;\n    m.m32 = sinx * cosz + cosx * siny * sinz;\n    m.m33 = cosx * cosy;\n    return m;\n  }\n  /**\n   * Creates a new `CSSMatrix` for the rotation matrix and returns it.\n   * This method is equivalent to the CSS `rotate3d()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d\n   *\n   * @param {number} x the `x-axis` vector length.\n   * @param {number} y the `y-axis` vector length.\n   * @param {number} z the `z-axis` vector length.\n   * @param {number} alpha the value in degrees of the rotation.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function RotateAxisAngle(x, y, z, alpha) {\n    var m = new CSSMatrix();\n    var length = Math.sqrt(x * x + y * y + z * z);\n\n    if (length === 0) {\n      // bad vector length, return identity\n      return m;\n    }\n\n    var X = x / length;\n    var Y = y / length;\n    var Z = z / length;\n    var angle = alpha * (Math.PI / 360);\n    var sinA = Math.sin(angle);\n    var cosA = Math.cos(angle);\n    var sinA2 = sinA * sinA;\n    var x2 = X * X;\n    var y2 = Y * Y;\n    var z2 = Z * Z;\n    var m11 = 1 - 2 * (y2 + z2) * sinA2;\n    m.m11 = m11;\n    m.a = m11;\n    var m12 = 2 * (X * Y * sinA2 + Z * sinA * cosA);\n    m.m12 = m12;\n    m.b = m12;\n    m.m13 = 2 * (X * Z * sinA2 - Y * sinA * cosA);\n    var m21 = 2 * (Y * X * sinA2 - Z * sinA * cosA);\n    m.m21 = m21;\n    m.c = m21;\n    var m22 = 1 - 2 * (z2 + x2) * sinA2;\n    m.m22 = m22;\n    m.d = m22;\n    m.m23 = 2 * (Y * Z * sinA2 + X * sinA * cosA);\n    m.m31 = 2 * (Z * X * sinA2 + Y * sinA * cosA);\n    m.m32 = 2 * (Z * Y * sinA2 - X * sinA * cosA);\n    m.m33 = 1 - 2 * (x2 + y2) * sinA2;\n    return m;\n  }\n  /**\n   * Creates a new `CSSMatrix` for the scale matrix and returns it.\n   * This method is equivalent to the CSS `scale3d()` function, except it doesn't\n   * accept {x, y, z} transform origin parameters.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale3d\n   *\n   * @param {number} x the `x-axis` scale.\n   * @param {number} y the `y-axis` scale.\n   * @param {number} z the `z-axis` scale.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function Scale(x, y, z) {\n    var m = new CSSMatrix();\n    m.m11 = x;\n    m.a = x;\n    m.m22 = y;\n    m.d = y;\n    m.m33 = z;\n    return m;\n  }\n  /**\n   * Creates a new `CSSMatrix` for the shear of both the `x-axis` and`y-axis`\n   * matrix and returns it. This method is equivalent to the CSS `skew()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew\n   *\n   * @param {number} angleX the X-angle in degrees.\n   * @param {number} angleY the Y-angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function Skew(angleX, angleY) {\n    var m = new CSSMatrix();\n\n    if (angleX) {\n      var radX = angleX * Math.PI / 180;\n      var tX = Math.tan(radX);\n      m.m21 = tX;\n      m.c = tX;\n    }\n\n    if (angleY) {\n      var radY = angleY * Math.PI / 180;\n      var tY = Math.tan(radY);\n      m.m12 = tY;\n      m.b = tY;\n    }\n\n    return m;\n  }\n  /**\n   * Creates a new `CSSMatrix` for the shear of the `x-axis` rotation matrix and\n   * returns it. This method is equivalent to the CSS `skewX()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewX\n   *\n   * @param {number} angle the angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function SkewX(angle) {\n    return Skew(angle, 0);\n  }\n  /**\n   * Creates a new `CSSMatrix` for the shear of the `y-axis` rotation matrix and\n   * returns it. This method is equivalent to the CSS `skewY()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewY\n   *\n   * @param {number} angle the angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function SkewY(angle) {\n    return Skew(0, angle);\n  }\n  /**\n   * Creates a new `CSSMatrix` resulted from the multiplication of two matrixes\n   * and returns it. Both matrixes are not changed.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m1 the first matrix.\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m2 the second matrix.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n\n\n  function Multiply(m1, m2) {\n    var m11 = m2.m11 * m1.m11 + m2.m12 * m1.m21 + m2.m13 * m1.m31 + m2.m14 * m1.m41;\n    var m12 = m2.m11 * m1.m12 + m2.m12 * m1.m22 + m2.m13 * m1.m32 + m2.m14 * m1.m42;\n    var m13 = m2.m11 * m1.m13 + m2.m12 * m1.m23 + m2.m13 * m1.m33 + m2.m14 * m1.m43;\n    var m14 = m2.m11 * m1.m14 + m2.m12 * m1.m24 + m2.m13 * m1.m34 + m2.m14 * m1.m44;\n    var m21 = m2.m21 * m1.m11 + m2.m22 * m1.m21 + m2.m23 * m1.m31 + m2.m24 * m1.m41;\n    var m22 = m2.m21 * m1.m12 + m2.m22 * m1.m22 + m2.m23 * m1.m32 + m2.m24 * m1.m42;\n    var m23 = m2.m21 * m1.m13 + m2.m22 * m1.m23 + m2.m23 * m1.m33 + m2.m24 * m1.m43;\n    var m24 = m2.m21 * m1.m14 + m2.m22 * m1.m24 + m2.m23 * m1.m34 + m2.m24 * m1.m44;\n    var m31 = m2.m31 * m1.m11 + m2.m32 * m1.m21 + m2.m33 * m1.m31 + m2.m34 * m1.m41;\n    var m32 = m2.m31 * m1.m12 + m2.m32 * m1.m22 + m2.m33 * m1.m32 + m2.m34 * m1.m42;\n    var m33 = m2.m31 * m1.m13 + m2.m32 * m1.m23 + m2.m33 * m1.m33 + m2.m34 * m1.m43;\n    var m34 = m2.m31 * m1.m14 + m2.m32 * m1.m24 + m2.m33 * m1.m34 + m2.m34 * m1.m44;\n    var m41 = m2.m41 * m1.m11 + m2.m42 * m1.m21 + m2.m43 * m1.m31 + m2.m44 * m1.m41;\n    var m42 = m2.m41 * m1.m12 + m2.m42 * m1.m22 + m2.m43 * m1.m32 + m2.m44 * m1.m42;\n    var m43 = m2.m41 * m1.m13 + m2.m42 * m1.m23 + m2.m43 * m1.m33 + m2.m44 * m1.m43;\n    var m44 = m2.m41 * m1.m14 + m2.m42 * m1.m24 + m2.m43 * m1.m34 + m2.m44 * m1.m44;\n    return fromArray([m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44]);\n  }\n  /**\n   * Creates and returns a new `DOMMatrix` compatible instance\n   * with equivalent instance.\n   * @class CSSMatrix\n   *\n   * @author thednp <https://github.com/thednp/DOMMatrix/>\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\n   */\n\n\n  var CSSMatrix = function CSSMatrix() {\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    var m = this; // array 6\n\n    m.a = 1;\n    m.b = 0;\n    m.c = 0;\n    m.d = 1;\n    m.e = 0;\n    m.f = 0; // array 16\n\n    m.m11 = 1;\n    m.m12 = 0;\n    m.m13 = 0;\n    m.m14 = 0;\n    m.m21 = 0;\n    m.m22 = 1;\n    m.m23 = 0;\n    m.m24 = 0;\n    m.m31 = 0;\n    m.m32 = 0;\n    m.m33 = 1;\n    m.m34 = 0;\n    m.m41 = 0;\n    m.m42 = 0;\n    m.m43 = 0;\n    m.m44 = 1;\n\n    if (args.length) {\n      var ARGS = [16, 6].some(function (l) {\n        return l === args.length;\n      }) ? args : args[0];\n      return m.setMatrixValue(ARGS);\n    }\n\n    return m;\n  };\n\n  var prototypeAccessors = {\n    isIdentity: {\n      configurable: true\n    },\n    is2D: {\n      configurable: true\n    }\n  };\n  /**\n   * A `Boolean` whose value is `true` if the matrix is the identity matrix. The identity\n   * matrix is one in which every value is 0 except those on the main diagonal from top-left\n   * to bottom-right corner (in other words, where the offsets in each direction are equal).\n   *\n   * @return {boolean} the current property value\n   */\n\n  prototypeAccessors.isIdentity.get = function () {\n    var m = this;\n    return m.m11 === 1 && m.m12 === 0 && m.m13 === 0 && m.m14 === 0 && m.m21 === 0 && m.m22 === 1 && m.m23 === 0 && m.m24 === 0 && m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m41 === 0 && m.m42 === 0 && m.m43 === 0 && m.m44 === 1;\n  };\n  /**\n   * A `Boolean` flag whose value is `true` if the matrix was initialized as a 2D matrix\n   * and `false` if the matrix is 3D.\n   *\n   * @return {boolean} the current property value\n   */\n\n\n  prototypeAccessors.is2D.get = function () {\n    var m = this;\n    return m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m43 === 0 && m.m44 === 1;\n  };\n  /**\n   * The `setMatrixValue` method replaces the existing matrix with one computed\n   * in the browser. EG: `matrix(1,0.25,-0.25,1,0,0)`\n   *\n   * The method accepts any *Array* values, the result of\n   * `DOMMatrix` instance method `toFloat64Array()` / `toFloat32Array()` calls\n   *or `CSSMatrix` instance method `toArray()`.\n   *\n   * This method expects valid *matrix()* / *matrix3d()* string values, as well\n   * as other transform functions like *translateX(10px)*.\n   *\n   * @param {string | CSSM.matrix | CSSM.matrix3d | CSSMatrix | DOMMatrix | CSSM.JSONMatrix} source\n   * @return {CSSMatrix} the matrix instance\n   */\n\n\n  CSSMatrix.prototype.setMatrixValue = function setMatrixValue(source) {\n    var m = this; // CSS transform string source - TransformList first\n\n    if (typeof source === 'string' && source.length && source !== 'none') {\n      return fromString(source);\n    } // [Arguments list | Array] come second\n\n\n    if ([Array, Float64Array, Float32Array].some(function (a) {\n      return source instanceof a;\n    })) {\n      // @ts-ignore\n      return fromArray(source);\n    } // new CSSMatrix(CSSMatrix | DOMMatrix | JSON) last\n\n\n    if ([CSSMatrix, DOMMatrix, Object].some(function (a) {\n      return source instanceof a;\n    })) {\n      // @ts-ignore\n      return fromMatrix(source);\n    }\n\n    return m;\n  };\n  /**\n   * Returns a *Float32Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param {boolean=} is2D *Array* representation of the matrix\n   * @return {Float32Array} an *Array* representation of the matrix\n   */\n\n\n  CSSMatrix.prototype.toFloat32Array = function toFloat32Array(is2D) {\n    return Float32Array.from(toArray(this, is2D));\n  };\n  /**\n   * Returns a *Float64Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param {boolean=} is2D *Array* representation of the matrix\n   * @return {Float64Array} an *Array* representation of the matrix\n   */\n\n\n  CSSMatrix.prototype.toFloat64Array = function toFloat64Array(is2D) {\n    return Float64Array.from(toArray(this, is2D));\n  };\n  /**\n   * Creates and returns a string representation of the matrix in `CSS` matrix syntax,\n   * using the appropriate `CSS` matrix notation.\n   *\n   * matrix3d *matrix3d(m11, m12, m13, m14, m21, ...)*\n   * matrix *matrix(a, b, c, d, e, f)*\n   *\n   * @return {string} a string representation of the matrix\n   */\n\n\n  CSSMatrix.prototype.toString = function toString() {\n    var m = this;\n    var is2D = m.is2D;\n    var values = m.toFloat64Array(is2D).join(', ');\n    var type = is2D ? 'matrix' : 'matrix3d';\n    return type + \"(\" + values + \")\";\n  };\n  /**\n   * Returns a JSON representation of the `CSSMatrix` instance, a standard *Object*\n   * that includes `{a,b,c,d,e,f}` and `{m11,m12,m13,..m44}` properties as well\n   * as the `is2D` & `isIdentity` properties.\n   *\n   * The result can also be used as a second parameter for the `fromMatrix` static method\n   * to load values into another matrix instance.\n   *\n   * @return {CSSM.JSONMatrix} an *Object* with all matrix values.\n   */\n\n\n  CSSMatrix.prototype.toJSON = function toJSON() {\n    var m = this;\n    var is2D = m.is2D;\n    var isIdentity = m.isIdentity;\n    return Object.assign({}, m, {\n      is2D: is2D,\n      isIdentity: isIdentity\n    });\n  };\n  /**\n   * The Multiply method returns a new CSSMatrix which is the result of this\n   * matrix multiplied by the passed matrix, with the passed matrix to the right.\n   * This matrix is not modified.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m2 CSSMatrix\n   * @return {CSSMatrix} The resulted matrix.\n   */\n\n\n  CSSMatrix.prototype.multiply = function multiply(m2) {\n    return Multiply(this, m2);\n  };\n  /**\n   * The translate method returns a new matrix which is this matrix post\n   * multiplied by a translation matrix containing the passed values. If the z\n   * component is undefined, a 0 value is used in its place. This matrix is not\n   * modified.\n   *\n   * @param {number} x X component of the translation value.\n   * @param {number=} y Y component of the translation value.\n   * @param {number=} z Z component of the translation value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n\n\n  CSSMatrix.prototype.translate = function translate(x, y, z) {\n    var X = x;\n    var Y = y;\n    var Z = z;\n\n    if (Y === undefined) {\n      Y = 0;\n    }\n\n    if (Z === undefined) {\n      Z = 0;\n    }\n\n    return Multiply(this, Translate(X, Y, Z));\n  };\n  /**\n   * The scale method returns a new matrix which is this matrix post multiplied by\n   * a scale matrix containing the passed values. If the z component is undefined,\n   * a 1 value is used in its place. If the y component is undefined, the x\n   * component value is used in its place. This matrix is not modified.\n   *\n   * @param {number} x The X component of the scale value.\n   * @param {number=} y The Y component of the scale value.\n   * @param {number=} z The Z component of the scale value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n\n\n  CSSMatrix.prototype.scale = function scale(x, y, z) {\n    var X = x;\n    var Y = y;\n    var Z = z;\n\n    if (Y === undefined) {\n      Y = x;\n    }\n\n    if (Z === undefined) {\n      Z = 1;\n    } // Z must be 1 if undefined\n\n\n    return Multiply(this, Scale(X, Y, Z));\n  };\n  /**\n   * The rotate method returns a new matrix which is this matrix post multiplied\n   * by each of 3 rotation matrices about the major axes, first X, then Y, then Z.\n   * If the y and z components are undefined, the x value is used to rotate the\n   * object about the z axis, as though the vector (0,0,x) were passed. All\n   * rotation values are in degrees. This matrix is not modified.\n   *\n   * @param {number} rx The X component of the rotation, or Z if Y and Z are null.\n   * @param {number=} ry The (optional) Y component of the rotation value.\n   * @param {number=} rz The (optional) Z component of the rotation value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n\n\n  CSSMatrix.prototype.rotate = function rotate(rx, ry, rz) {\n    var RX = rx;\n    var RY = ry || 0;\n    var RZ = rz || 0;\n\n    if (typeof rx === 'number' && ry === undefined && rz === undefined) {\n      RZ = RX;\n      RX = 0;\n      RY = 0;\n    }\n\n    return Multiply(this, Rotate(RX, RY, RZ));\n  };\n  /**\n   * The rotateAxisAngle method returns a new matrix which is this matrix post\n   * multiplied by a rotation matrix with the given axis and `angle`. The right-hand\n   * rule is used to determine the direction of rotation. All rotation values are\n   * in degrees. This matrix is not modified.\n   *\n   * @param {number} x The X component of the axis vector.\n   * @param {number} y The Y component of the axis vector.\n   * @param {number} z The Z component of the axis vector.\n   * @param {number} angle The angle of rotation about the axis vector, in degrees.\n   * @return {CSSMatrix} The resulted matrix\n   */\n\n\n  CSSMatrix.prototype.rotateAxisAngle = function rotateAxisAngle(x, y, z, angle) {\n    if ([x, y, z, angle].some(function (n) {\n      return Number.isNaN(+n);\n    })) {\n      throw new TypeError('CSSMatrix: expecting 4 values');\n    }\n\n    return Multiply(this, RotateAxisAngle(x, y, z, angle));\n  };\n  /**\n   * Specifies a skew transformation along the `x-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param {number} angle The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n\n\n  CSSMatrix.prototype.skewX = function skewX(angle) {\n    return Multiply(this, SkewX(angle));\n  };\n  /**\n   * Specifies a skew transformation along the `y-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param {number} angle The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n\n\n  CSSMatrix.prototype.skewY = function skewY(angle) {\n    return Multiply(this, SkewY(angle));\n  };\n  /**\n   * Specifies a skew transformation along both the `x-axis` and `y-axis`.\n   * This matrix is not modified.\n   *\n   * @param {number} angleX The X-angle amount in degrees to skew.\n   * @param {number} angleY The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n\n\n  CSSMatrix.prototype.skew = function skew(angleX, angleY) {\n    return Multiply(this, Skew(angleX, angleY));\n  };\n  /**\n   * Transforms a specified vector using the matrix, returning a new\n   * {x,y,z,w} Tuple *Object* comprising the transformed vector.\n   * Neither the matrix nor the original vector are altered.\n   *\n   * The method is equivalent with `transformPoint()` method\n   * of the `DOMMatrix` constructor.\n   *\n   * @param {CSSM.PointTuple | DOMPoint} t Tuple with `{x,y,z,w}` components\n   * @return {CSSM.PointTuple | DOMPoint} the resulting Tuple\n   */\n\n\n  CSSMatrix.prototype.transformPoint = function transformPoint(t) {\n    var m = this;\n    var x = m.m11 * t.x + m.m21 * t.y + m.m31 * t.z + m.m41 * t.w;\n    var y = m.m12 * t.x + m.m22 * t.y + m.m32 * t.z + m.m42 * t.w;\n    var z = m.m13 * t.x + m.m23 * t.y + m.m33 * t.z + m.m43 * t.w;\n    var w = m.m14 * t.x + m.m24 * t.y + m.m34 * t.z + m.m44 * t.w;\n    return t instanceof DOMPoint ? new DOMPoint(x, y, z, w) : {\n      x: x,\n      y: y,\n      z: z,\n      w: w\n    };\n  };\n\n  Object.defineProperties(CSSMatrix.prototype, prototypeAccessors); // Add Transform Functions to CSSMatrix object\n  // without creating a TypeScript namespace.\n\n  Object.assign(CSSMatrix, {\n    Translate: Translate,\n    Rotate: Rotate,\n    RotateAxisAngle: RotateAxisAngle,\n    Scale: Scale,\n    SkewX: SkewX,\n    SkewY: SkewY,\n    Skew: Skew,\n    Multiply: Multiply,\n    fromArray: fromArray,\n    fromMatrix: fromMatrix,\n    fromString: fromString,\n    toArray: toArray\n  });\n  var version = \"1.0.3\";\n  /**\n   * A global namespace for library version.\n   * @type {string}\n   */\n\n  var Version = version;\n  /** @typedef {import('../types/index')} */\n\n  Object.assign(CSSMatrix, {\n    Version: Version\n  });\n  return CSSMatrix;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","globalThis","self","CSSMatrix","fromArray","array","m","a","Array","from","every","n","Number","isNaN","TypeError","length","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","c","e","b","d","f","M11","M12","M21","M22","M41","M42","fromMatrix","keys","Object","k","JSON","stringify","fromString","source","str","String","replace","invalidStringError","split","filter","forEach","tf","ref","prop","value","components","map","includes","parseFloat","Math","PI","x","y","z","xyz","xyza","undefined","values","abs","multiply","translate","rotateAxisAngle","rotate","some","scale","nosy","sy","skew","test","p","fn","axis","idx","indexOf","def","axeValues","apply","toArray","is2D","Translate","Rotate","rx","ry","rz","degToRad","radX","radY","radZ","cosx","cos","sinx","sin","cosy","siny","cosz","sinz","RotateAxisAngle","alpha","sqrt","X","Y","Z","angle","sinA","cosA","sinA2","x2","y2","z2","Scale","Skew","angleX","angleY","tX","tan","tY","SkewX","SkewY","Multiply","m1","m2","args","len","arguments","ARGS","l","setMatrixValue","prototypeAccessors","isIdentity","configurable","get","prototype","Float64Array","Float32Array","DOMMatrix","toFloat32Array","toFloat64Array","toString","join","type","toJSON","assign","RX","RY","RZ","skewX","skewY","transformPoint","t","w","DOMPoint","defineProperties","version","Version"],"sources":["/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/dommatrix/dist/dommatrix.js"],"sourcesContent":["/*!\n* DOMMatrix v1.0.3 (https://thednp.github.io/dommatrix/)\n* Copyright 2022 © thednp\n* Licensed under MIT (https://github.com/thednp/DOMMatrix/blob/master/LICENSE)\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.CSSMatrix = factory());\n})(this, (function () { 'use strict';\n\n  // DOMMatrix Static methods\n  // * `fromArray` is a more simple implementation, should also accept Float[32/64]Array;\n  // * `fromMatrix` load values from another CSSMatrix/DOMMatrix instance or JSON object;\n  // * `fromString` parses and loads values from any valid CSS transform string (TransformList).\n\n  /**\n   * Creates a new mutable `CSSMatrix` instance given an array of 16/6 floating point values.\n   * This static method invalidates arrays that contain non-number elements.\n   *\n   * If the array has six values, the result is a 2D matrix; if the array has 16 values,\n   * the result is a 3D matrix. Otherwise, a TypeError exception is thrown.\n   *\n   * @param {CSSM.matrix | CSSM.matrix3d} array an `Array` to feed values from.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function fromArray(array) {\n    var m = new CSSMatrix();\n    var a = Array.from(array);\n\n    if (!a.every(function (n) { return !Number.isNaN(n); })) {\n      throw TypeError((\"CSSMatrix: \\\"\" + array + \"\\\" must only have numbers.\"));\n    }\n    if (a.length === 16) {\n      var m11 = a[0];\n      var m12 = a[1];\n      var m13 = a[2];\n      var m14 = a[3];\n      var m21 = a[4];\n      var m22 = a[5];\n      var m23 = a[6];\n      var m24 = a[7];\n      var m31 = a[8];\n      var m32 = a[9];\n      var m33 = a[10];\n      var m34 = a[11];\n      var m41 = a[12];\n      var m42 = a[13];\n      var m43 = a[14];\n      var m44 = a[15];\n\n      m.m11 = m11;\n      m.a = m11;\n\n      m.m21 = m21;\n      m.c = m21;\n\n      m.m31 = m31;\n\n      m.m41 = m41;\n      m.e = m41;\n\n      m.m12 = m12;\n      m.b = m12;\n\n      m.m22 = m22;\n      m.d = m22;\n\n      m.m32 = m32;\n\n      m.m42 = m42;\n      m.f = m42;\n\n      m.m13 = m13;\n      m.m23 = m23;\n      m.m33 = m33;\n      m.m43 = m43;\n      m.m14 = m14;\n      m.m24 = m24;\n      m.m34 = m34;\n      m.m44 = m44;\n    } else if (a.length === 6) {\n      var M11 = a[0];\n      var M12 = a[1];\n      var M21 = a[2];\n      var M22 = a[3];\n      var M41 = a[4];\n      var M42 = a[5];\n\n      m.m11 = M11;\n      m.a = M11;\n\n      m.m12 = M12;\n      m.b = M12;\n\n      m.m21 = M21;\n      m.c = M21;\n\n      m.m22 = M22;\n      m.d = M22;\n\n      m.m41 = M41;\n      m.e = M41;\n\n      m.m42 = M42;\n      m.f = M42;\n    } else {\n      throw new TypeError('CSSMatrix: expecting an Array of 6/16 values.');\n    }\n    return m;\n  }\n\n  /**\n   * Creates a new mutable `CSSMatrix` instance given an existing matrix or a\n   * `DOMMatrix` instance which provides the values for its properties.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m the source matrix to feed values from.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function fromMatrix(m) {\n    var keys = Object.keys(new CSSMatrix());\n    if (typeof m === 'object' && keys.every(function (k) { return k in m; })) {\n      return fromArray(\n        [m.m11, m.m12, m.m13, m.m14,\n          m.m21, m.m22, m.m23, m.m24,\n          m.m31, m.m32, m.m33, m.m34,\n          m.m41, m.m42, m.m43, m.m44]\n      );\n    }\n    throw TypeError((\"CSSMatrix: \\\"\" + (JSON.stringify(m)) + \"\\\" is not a DOMMatrix / CSSMatrix / JSON compatible object.\"));\n  }\n\n  /**\n   * Creates a new mutable `CSSMatrix` given any valid CSS transform string,\n   * or what we call `TransformList`:\n   *\n   * * `matrix(a, b, c, d, e, f)` - valid matrix() transform function\n   * * `matrix3d(m11, m12, m13, ...m44)` - valid matrix3d() transform function\n   * * `translate(tx, ty) rotateX(alpha)` - any valid transform function(s)\n   *\n   * @copyright thednp © 2021\n   *\n   * @param {string} source valid CSS transform string syntax.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function fromString(source) {\n    if (typeof source !== 'string') {\n      throw TypeError((\"CSSMatrix: \\\"\" + source + \"\\\" is not a string.\"));\n    }\n    var str = String(source).replace(/\\s/g, '');\n    var m = new CSSMatrix();\n    var invalidStringError = \"CSSMatrix: invalid transform string \\\"\" + source + \"\\\"\";\n\n    // const px = ['perspective'];\n    // const length = ['translate', 'translate3d', 'translateX', 'translateY', 'translateZ'];\n    // const deg = ['rotate', 'rotate3d', 'rotateX', 'rotateY', 'rotateZ', 'skew', 'skewX', 'skewY'];\n    // const abs = ['scale', 'scale3d', 'matrix', 'matrix3d'];\n    // const transformFunctions = px.concat(length, deg, abs);\n\n    str.split(')').filter(function (f) { return f; }).forEach(function (tf) {\n      var ref = tf.split('(');\n      var prop = ref[0];\n      var value = ref[1];\n\n      // invalidate empty string\n      if (!value) { throw TypeError(invalidStringError); }\n\n      var components = value.split(',')\n        .map(function (n) { return (n.includes('rad') ? parseFloat(n) * (180 / Math.PI) : parseFloat(n)); });\n\n      var x = components[0];\n      var y = components[1];\n      var z = components[2];\n      var a = components[3];\n      var xyz = [x, y, z];\n      var xyza = [x, y, z, a];\n\n      // single number value expected\n      if (prop === 'perspective' && x && [y, z].every(function (n) { return n === undefined; })) {\n        m.m34 = -1 / x;\n      // 6/16 number values expected\n      } else if (prop.includes('matrix') && [6, 16].includes(components.length)\n        && components.every(function (n) { return !Number.isNaN(+n); })) {\n        var values = components.map(function (n) { return (Math.abs(n) < 1e-6 ? 0 : n); });\n        // @ts-ignore -- conditions should suffice\n        m = m.multiply(fromArray(values));\n      // 3 values expected\n      } else if (prop === 'translate3d' && xyz.every(function (n) { return !Number.isNaN(+n); })) {\n        m = m.translate(x, y, z);\n      // single/double number value(s) expected\n      } else if (prop === 'translate' && x && z === undefined) {\n        m = m.translate(x, y || 0, 0);\n      // all 4 values expected\n      } else if (prop === 'rotate3d' && xyza.every(function (n) { return !Number.isNaN(+n); }) && a) {\n        m = m.rotateAxisAngle(x, y, z, a);\n      // single value expected\n      } else if (prop === 'rotate' && x && [y, z].every(function (n) { return n === undefined; })) {\n        m = m.rotate(0, 0, x);\n      // 3 values expected\n      } else if (prop === 'scale3d' && xyz.every(function (n) { return !Number.isNaN(+n); }) && xyz.some(function (n) { return n !== 1; })) {\n        m = m.scale(x, y, z);\n      // single value expected\n      } else if (prop === 'scale' && !Number.isNaN(x) && x !== 1 && z === undefined) {\n        var nosy = Number.isNaN(+y);\n        var sy = nosy ? x : y;\n        m = m.scale(x, sy, 1);\n      // single/double value expected\n      } else if (prop === 'skew' && (x || (!Number.isNaN(x) && y)) && z === undefined) {\n        m = m.skew(x, y || 0);\n      } else if (/[XYZ]/.test(prop) && x && [y, z].every(function (n) { return n === undefined; }) // a single value expected\n        && ['translate', 'rotate', 'scale', 'skew'].some(function (p) { return prop.includes(p); })) {\n        if (['skewX', 'skewY'].includes(prop)) {\n          // @ts-ignore unfortunately\n          m = m[prop](x);\n        } else {\n          var fn = prop.replace(/[XYZ]/, '');\n          var axis = prop.replace(fn, '');\n          var idx = ['X', 'Y', 'Z'].indexOf(axis);\n          var def = fn === 'scale' ? 1 : 0;\n          var axeValues = [\n            idx === 0 ? x : def,\n            idx === 1 ? x : def,\n            idx === 2 ? x : def];\n          // @ts-ignore unfortunately\n          m = m[fn].apply(m, axeValues);\n        }\n      } else {\n        throw TypeError(invalidStringError);\n      }\n    });\n\n    return m;\n  }\n\n  /**\n   * Returns an *Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m the source matrix to feed values from.\n   * @param {boolean=} is2D *Array* representation of the matrix\n   * @return {CSSM.matrix | CSSM.matrix3d} an *Array* representation of the matrix\n   */\n  function toArray(m, is2D) {\n    if (is2D) {\n      return [m.a, m.b, m.c, m.d, m.e, m.f];\n    }\n    return [m.m11, m.m12, m.m13, m.m14,\n      m.m21, m.m22, m.m23, m.m24,\n      m.m31, m.m32, m.m33, m.m34,\n      m.m41, m.m42, m.m43, m.m44];\n  }\n\n  // Transform Functions\n  // https://www.w3.org/TR/css-transforms-1/#transform-functions\n\n  /**\n   * Creates a new `CSSMatrix` for the translation matrix and returns it.\n   * This method is equivalent to the CSS `translate3d()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d\n   *\n   * @param {number} x the `x-axis` position.\n   * @param {number} y the `y-axis` position.\n   * @param {number} z the `z-axis` position.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Translate(x, y, z) {\n    var m = new CSSMatrix();\n    m.m41 = x;\n    m.e = x;\n    m.m42 = y;\n    m.f = y;\n    m.m43 = z;\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the rotation matrix and returns it.\n   *\n   * http://en.wikipedia.org/wiki/Rotation_matrix\n   *\n   * @param {number} rx the `x-axis` rotation.\n   * @param {number} ry the `y-axis` rotation.\n   * @param {number} rz the `z-axis` rotation.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Rotate(rx, ry, rz) {\n    var m = new CSSMatrix();\n    var degToRad = Math.PI / 180;\n    var radX = rx * degToRad;\n    var radY = ry * degToRad;\n    var radZ = rz * degToRad;\n\n    // minus sin() because of right-handed system\n    var cosx = Math.cos(radX);\n    var sinx = -Math.sin(radX);\n    var cosy = Math.cos(radY);\n    var siny = -Math.sin(radY);\n    var cosz = Math.cos(radZ);\n    var sinz = -Math.sin(radZ);\n\n    var m11 = cosy * cosz;\n    var m12 = -cosy * sinz;\n\n    m.m11 = m11;\n    m.a = m11;\n\n    m.m12 = m12;\n    m.b = m12;\n\n    m.m13 = siny;\n\n    var m21 = sinx * siny * cosz + cosx * sinz;\n    m.m21 = m21;\n    m.c = m21;\n\n    var m22 = cosx * cosz - sinx * siny * sinz;\n    m.m22 = m22;\n    m.d = m22;\n\n    m.m23 = -sinx * cosy;\n\n    m.m31 = sinx * sinz - cosx * siny * cosz;\n    m.m32 = sinx * cosz + cosx * siny * sinz;\n    m.m33 = cosx * cosy;\n\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the rotation matrix and returns it.\n   * This method is equivalent to the CSS `rotate3d()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d\n   *\n   * @param {number} x the `x-axis` vector length.\n   * @param {number} y the `y-axis` vector length.\n   * @param {number} z the `z-axis` vector length.\n   * @param {number} alpha the value in degrees of the rotation.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function RotateAxisAngle(x, y, z, alpha) {\n    var m = new CSSMatrix();\n    var length = Math.sqrt(x * x + y * y + z * z);\n\n    if (length === 0) {\n      // bad vector length, return identity\n      return m;\n    }\n\n    var X = x / length;\n    var Y = y / length;\n    var Z = z / length;\n\n    var angle = alpha * (Math.PI / 360);\n    var sinA = Math.sin(angle);\n    var cosA = Math.cos(angle);\n    var sinA2 = sinA * sinA;\n    var x2 = X * X;\n    var y2 = Y * Y;\n    var z2 = Z * Z;\n\n    var m11 = 1 - 2 * (y2 + z2) * sinA2;\n    m.m11 = m11;\n    m.a = m11;\n\n    var m12 = 2 * (X * Y * sinA2 + Z * sinA * cosA);\n    m.m12 = m12;\n    m.b = m12;\n\n    m.m13 = 2 * (X * Z * sinA2 - Y * sinA * cosA);\n\n    var m21 = 2 * (Y * X * sinA2 - Z * sinA * cosA);\n    m.m21 = m21;\n    m.c = m21;\n\n    var m22 = 1 - 2 * (z2 + x2) * sinA2;\n    m.m22 = m22;\n    m.d = m22;\n\n    m.m23 = 2 * (Y * Z * sinA2 + X * sinA * cosA);\n    m.m31 = 2 * (Z * X * sinA2 + Y * sinA * cosA);\n    m.m32 = 2 * (Z * Y * sinA2 - X * sinA * cosA);\n    m.m33 = 1 - 2 * (x2 + y2) * sinA2;\n\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the scale matrix and returns it.\n   * This method is equivalent to the CSS `scale3d()` function, except it doesn't\n   * accept {x, y, z} transform origin parameters.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale3d\n   *\n   * @param {number} x the `x-axis` scale.\n   * @param {number} y the `y-axis` scale.\n   * @param {number} z the `z-axis` scale.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Scale(x, y, z) {\n    var m = new CSSMatrix();\n    m.m11 = x;\n    m.a = x;\n\n    m.m22 = y;\n    m.d = y;\n\n    m.m33 = z;\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the shear of both the `x-axis` and`y-axis`\n   * matrix and returns it. This method is equivalent to the CSS `skew()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew\n   *\n   * @param {number} angleX the X-angle in degrees.\n   * @param {number} angleY the Y-angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Skew(angleX, angleY) {\n    var m = new CSSMatrix();\n    if (angleX) {\n      var radX = (angleX * Math.PI) / 180;\n      var tX = Math.tan(radX);\n      m.m21 = tX;\n      m.c = tX;\n    }\n    if (angleY) {\n      var radY = (angleY * Math.PI) / 180;\n      var tY = Math.tan(radY);\n      m.m12 = tY;\n      m.b = tY;\n    }\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the shear of the `x-axis` rotation matrix and\n   * returns it. This method is equivalent to the CSS `skewX()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewX\n   *\n   * @param {number} angle the angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function SkewX(angle) {\n    return Skew(angle, 0);\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the shear of the `y-axis` rotation matrix and\n   * returns it. This method is equivalent to the CSS `skewY()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewY\n   *\n   * @param {number} angle the angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function SkewY(angle) {\n    return Skew(0, angle);\n  }\n\n  /**\n   * Creates a new `CSSMatrix` resulted from the multiplication of two matrixes\n   * and returns it. Both matrixes are not changed.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m1 the first matrix.\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m2 the second matrix.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Multiply(m1, m2) {\n    var m11 = m2.m11 * m1.m11 + m2.m12 * m1.m21 + m2.m13 * m1.m31 + m2.m14 * m1.m41;\n    var m12 = m2.m11 * m1.m12 + m2.m12 * m1.m22 + m2.m13 * m1.m32 + m2.m14 * m1.m42;\n    var m13 = m2.m11 * m1.m13 + m2.m12 * m1.m23 + m2.m13 * m1.m33 + m2.m14 * m1.m43;\n    var m14 = m2.m11 * m1.m14 + m2.m12 * m1.m24 + m2.m13 * m1.m34 + m2.m14 * m1.m44;\n\n    var m21 = m2.m21 * m1.m11 + m2.m22 * m1.m21 + m2.m23 * m1.m31 + m2.m24 * m1.m41;\n    var m22 = m2.m21 * m1.m12 + m2.m22 * m1.m22 + m2.m23 * m1.m32 + m2.m24 * m1.m42;\n    var m23 = m2.m21 * m1.m13 + m2.m22 * m1.m23 + m2.m23 * m1.m33 + m2.m24 * m1.m43;\n    var m24 = m2.m21 * m1.m14 + m2.m22 * m1.m24 + m2.m23 * m1.m34 + m2.m24 * m1.m44;\n\n    var m31 = m2.m31 * m1.m11 + m2.m32 * m1.m21 + m2.m33 * m1.m31 + m2.m34 * m1.m41;\n    var m32 = m2.m31 * m1.m12 + m2.m32 * m1.m22 + m2.m33 * m1.m32 + m2.m34 * m1.m42;\n    var m33 = m2.m31 * m1.m13 + m2.m32 * m1.m23 + m2.m33 * m1.m33 + m2.m34 * m1.m43;\n    var m34 = m2.m31 * m1.m14 + m2.m32 * m1.m24 + m2.m33 * m1.m34 + m2.m34 * m1.m44;\n\n    var m41 = m2.m41 * m1.m11 + m2.m42 * m1.m21 + m2.m43 * m1.m31 + m2.m44 * m1.m41;\n    var m42 = m2.m41 * m1.m12 + m2.m42 * m1.m22 + m2.m43 * m1.m32 + m2.m44 * m1.m42;\n    var m43 = m2.m41 * m1.m13 + m2.m42 * m1.m23 + m2.m43 * m1.m33 + m2.m44 * m1.m43;\n    var m44 = m2.m41 * m1.m14 + m2.m42 * m1.m24 + m2.m43 * m1.m34 + m2.m44 * m1.m44;\n\n    return fromArray(\n      [m11, m12, m13, m14,\n        m21, m22, m23, m24,\n        m31, m32, m33, m34,\n        m41, m42, m43, m44]\n    );\n  }\n\n  /**\n   * Creates and returns a new `DOMMatrix` compatible instance\n   * with equivalent instance.\n   * @class CSSMatrix\n   *\n   * @author thednp <https://github.com/thednp/DOMMatrix/>\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\n   */\n\n  var CSSMatrix = function CSSMatrix() {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var m = this;\n    // array 6\n    m.a = 1; m.b = 0;\n    m.c = 0; m.d = 1;\n    m.e = 0; m.f = 0;\n    // array 16\n    m.m11 = 1; m.m12 = 0; m.m13 = 0; m.m14 = 0;\n    m.m21 = 0; m.m22 = 1; m.m23 = 0; m.m24 = 0;\n    m.m31 = 0; m.m32 = 0; m.m33 = 1; m.m34 = 0;\n    m.m41 = 0; m.m42 = 0; m.m43 = 0; m.m44 = 1;\n\n    if (args.length) {\n      var ARGS = [16, 6].some(function (l) { return l === args.length; }) ? args : args[0];\n\n      return m.setMatrixValue(ARGS);\n    }\n    return m;\n  };\n\n  var prototypeAccessors = { isIdentity: { configurable: true },is2D: { configurable: true } };\n\n  /**\n   * A `Boolean` whose value is `true` if the matrix is the identity matrix. The identity\n   * matrix is one in which every value is 0 except those on the main diagonal from top-left\n   * to bottom-right corner (in other words, where the offsets in each direction are equal).\n   *\n   * @return {boolean} the current property value\n   */\n  prototypeAccessors.isIdentity.get = function () {\n    var m = this;\n    return (m.m11 === 1 && m.m12 === 0 && m.m13 === 0 && m.m14 === 0\n            && m.m21 === 0 && m.m22 === 1 && m.m23 === 0 && m.m24 === 0\n            && m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0\n            && m.m41 === 0 && m.m42 === 0 && m.m43 === 0 && m.m44 === 1);\n  };\n\n  /**\n   * A `Boolean` flag whose value is `true` if the matrix was initialized as a 2D matrix\n   * and `false` if the matrix is 3D.\n   *\n   * @return {boolean} the current property value\n   */\n  prototypeAccessors.is2D.get = function () {\n    var m = this;\n    return (m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m43 === 0 && m.m44 === 1);\n  };\n\n  /**\n   * The `setMatrixValue` method replaces the existing matrix with one computed\n   * in the browser. EG: `matrix(1,0.25,-0.25,1,0,0)`\n   *\n   * The method accepts any *Array* values, the result of\n   * `DOMMatrix` instance method `toFloat64Array()` / `toFloat32Array()` calls\n   *or `CSSMatrix` instance method `toArray()`.\n   *\n   * This method expects valid *matrix()* / *matrix3d()* string values, as well\n   * as other transform functions like *translateX(10px)*.\n   *\n   * @param {string | CSSM.matrix | CSSM.matrix3d | CSSMatrix | DOMMatrix | CSSM.JSONMatrix} source\n   * @return {CSSMatrix} the matrix instance\n   */\n  CSSMatrix.prototype.setMatrixValue = function setMatrixValue (source) {\n    var m = this;\n\n    // CSS transform string source - TransformList first\n    if (typeof source === 'string' && source.length && source !== 'none') {\n      return fromString(source);\n    }\n    // [Arguments list | Array] come second\n    if ([Array, Float64Array, Float32Array].some(function (a) { return source instanceof a; })) {\n      // @ts-ignore\n      return fromArray(source);\n    }\n    // new CSSMatrix(CSSMatrix | DOMMatrix | JSON) last\n    if ([CSSMatrix, DOMMatrix, Object].some(function (a) { return source instanceof a; })) {\n      // @ts-ignore\n      return fromMatrix(source);\n    }\n\n    return m;\n  };\n\n  /**\n   * Returns a *Float32Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param {boolean=} is2D *Array* representation of the matrix\n   * @return {Float32Array} an *Array* representation of the matrix\n   */\n  CSSMatrix.prototype.toFloat32Array = function toFloat32Array (is2D) {\n    return Float32Array.from(toArray(this, is2D));\n  };\n\n  /**\n   * Returns a *Float64Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param {boolean=} is2D *Array* representation of the matrix\n   * @return {Float64Array} an *Array* representation of the matrix\n   */\n  CSSMatrix.prototype.toFloat64Array = function toFloat64Array (is2D) {\n    return Float64Array.from(toArray(this, is2D));\n  };\n\n  /**\n   * Creates and returns a string representation of the matrix in `CSS` matrix syntax,\n   * using the appropriate `CSS` matrix notation.\n   *\n   * matrix3d *matrix3d(m11, m12, m13, m14, m21, ...)*\n   * matrix *matrix(a, b, c, d, e, f)*\n   *\n   * @return {string} a string representation of the matrix\n   */\n  CSSMatrix.prototype.toString = function toString () {\n    var m = this;\n    var is2D = m.is2D;\n    var values = m.toFloat64Array(is2D).join(', ');\n    var type = is2D ? 'matrix' : 'matrix3d';\n    return (type + \"(\" + values + \")\");\n  };\n\n  /**\n   * Returns a JSON representation of the `CSSMatrix` instance, a standard *Object*\n   * that includes `{a,b,c,d,e,f}` and `{m11,m12,m13,..m44}` properties as well\n   * as the `is2D` & `isIdentity` properties.\n   *\n   * The result can also be used as a second parameter for the `fromMatrix` static method\n   * to load values into another matrix instance.\n   *\n   * @return {CSSM.JSONMatrix} an *Object* with all matrix values.\n   */\n  CSSMatrix.prototype.toJSON = function toJSON () {\n    var m = this;\n    var is2D = m.is2D;\n      var isIdentity = m.isIdentity;\n    return Object.assign({}, m, {is2D: is2D, isIdentity: isIdentity});\n  };\n\n  /**\n   * The Multiply method returns a new CSSMatrix which is the result of this\n   * matrix multiplied by the passed matrix, with the passed matrix to the right.\n   * This matrix is not modified.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSM.JSONMatrix} m2 CSSMatrix\n   * @return {CSSMatrix} The resulted matrix.\n   */\n  CSSMatrix.prototype.multiply = function multiply (m2) {\n    return Multiply(this, m2);\n  };\n\n  /**\n   * The translate method returns a new matrix which is this matrix post\n   * multiplied by a translation matrix containing the passed values. If the z\n   * component is undefined, a 0 value is used in its place. This matrix is not\n   * modified.\n   *\n   * @param {number} x X component of the translation value.\n   * @param {number=} y Y component of the translation value.\n   * @param {number=} z Z component of the translation value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.translate = function translate (x, y, z) {\n    var X = x;\n    var Y = y;\n    var Z = z;\n    if (Y === undefined) { Y = 0; }\n    if (Z === undefined) { Z = 0; }\n    return Multiply(this, Translate(X, Y, Z));\n  };\n\n  /**\n   * The scale method returns a new matrix which is this matrix post multiplied by\n   * a scale matrix containing the passed values. If the z component is undefined,\n   * a 1 value is used in its place. If the y component is undefined, the x\n   * component value is used in its place. This matrix is not modified.\n   *\n   * @param {number} x The X component of the scale value.\n   * @param {number=} y The Y component of the scale value.\n   * @param {number=} z The Z component of the scale value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.scale = function scale (x, y, z) {\n    var X = x;\n    var Y = y;\n    var Z = z;\n    if (Y === undefined) { Y = x; }\n    if (Z === undefined) { Z = 1; } // Z must be 1 if undefined\n\n    return Multiply(this, Scale(X, Y, Z));\n  };\n\n  /**\n   * The rotate method returns a new matrix which is this matrix post multiplied\n   * by each of 3 rotation matrices about the major axes, first X, then Y, then Z.\n   * If the y and z components are undefined, the x value is used to rotate the\n   * object about the z axis, as though the vector (0,0,x) were passed. All\n   * rotation values are in degrees. This matrix is not modified.\n   *\n   * @param {number} rx The X component of the rotation, or Z if Y and Z are null.\n   * @param {number=} ry The (optional) Y component of the rotation value.\n   * @param {number=} rz The (optional) Z component of the rotation value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.rotate = function rotate (rx, ry, rz) {\n    var RX = rx;\n    var RY = ry || 0;\n    var RZ = rz || 0;\n\n    if (typeof rx === 'number' && ry === undefined && rz === undefined) {\n      RZ = RX; RX = 0; RY = 0;\n    }\n\n    return Multiply(this, Rotate(RX, RY, RZ));\n  };\n\n  /**\n   * The rotateAxisAngle method returns a new matrix which is this matrix post\n   * multiplied by a rotation matrix with the given axis and `angle`. The right-hand\n   * rule is used to determine the direction of rotation. All rotation values are\n   * in degrees. This matrix is not modified.\n   *\n   * @param {number} x The X component of the axis vector.\n   * @param {number} y The Y component of the axis vector.\n   * @param {number} z The Z component of the axis vector.\n   * @param {number} angle The angle of rotation about the axis vector, in degrees.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.rotateAxisAngle = function rotateAxisAngle (x, y, z, angle) {\n    if ([x, y, z, angle].some(function (n) { return Number.isNaN(+n); })) {\n      throw new TypeError('CSSMatrix: expecting 4 values');\n    }\n    return Multiply(this, RotateAxisAngle(x, y, z, angle));\n  };\n\n  /**\n   * Specifies a skew transformation along the `x-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param {number} angle The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.skewX = function skewX (angle) {\n    return Multiply(this, SkewX(angle));\n  };\n\n  /**\n   * Specifies a skew transformation along the `y-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param {number} angle The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.skewY = function skewY (angle) {\n    return Multiply(this, SkewY(angle));\n  };\n\n  /**\n   * Specifies a skew transformation along both the `x-axis` and `y-axis`.\n   * This matrix is not modified.\n   *\n   * @param {number} angleX The X-angle amount in degrees to skew.\n   * @param {number} angleY The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.skew = function skew (angleX, angleY) {\n    return Multiply(this, Skew(angleX, angleY));\n  };\n\n  /**\n   * Transforms a specified vector using the matrix, returning a new\n   * {x,y,z,w} Tuple *Object* comprising the transformed vector.\n   * Neither the matrix nor the original vector are altered.\n   *\n   * The method is equivalent with `transformPoint()` method\n   * of the `DOMMatrix` constructor.\n   *\n   * @param {CSSM.PointTuple | DOMPoint} t Tuple with `{x,y,z,w}` components\n   * @return {CSSM.PointTuple | DOMPoint} the resulting Tuple\n   */\n  CSSMatrix.prototype.transformPoint = function transformPoint (t) {\n    var m = this;\n\n    var x = m.m11 * t.x + m.m21 * t.y + m.m31 * t.z + m.m41 * t.w;\n    var y = m.m12 * t.x + m.m22 * t.y + m.m32 * t.z + m.m42 * t.w;\n    var z = m.m13 * t.x + m.m23 * t.y + m.m33 * t.z + m.m43 * t.w;\n    var w = m.m14 * t.x + m.m24 * t.y + m.m34 * t.z + m.m44 * t.w;\n\n    return t instanceof DOMPoint\n      ? new DOMPoint(x, y, z, w)\n      : {\n        x: x, y: y, z: z, w: w,\n      };\n  };\n\n  Object.defineProperties( CSSMatrix.prototype, prototypeAccessors );\n\n  // Add Transform Functions to CSSMatrix object\n  // without creating a TypeScript namespace.\n  Object.assign(CSSMatrix, {\n    Translate: Translate,\n    Rotate: Rotate,\n    RotateAxisAngle: RotateAxisAngle,\n    Scale: Scale,\n    SkewX: SkewX,\n    SkewY: SkewY,\n    Skew: Skew,\n    Multiply: Multiply,\n    fromArray: fromArray,\n    fromMatrix: fromMatrix,\n    fromString: fromString,\n    toArray: toArray,\n  });\n\n  var version = \"1.0.3\";\n\n  /**\n   * A global namespace for library version.\n   * @type {string}\n   */\n  var Version = version;\n\n  /** @typedef {import('../types/index')} */\n\n  Object.assign(CSSMatrix, { Version: Version });\n\n  return CSSMatrix;\n\n}));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,CAAC,UAAUA,MAAV,EAAkBC,OAAlB,EAA2B;EAC1B,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DA,MAAM,CAACD,OAAP,GAAiBD,OAAO,EAAvF,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAACH,OAAD,CAAnD,IACCD,MAAM,GAAG,OAAOM,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiDN,MAAM,IAAIO,IAApE,EAA0EP,MAAM,CAACQ,SAAP,GAAmBP,OAAO,EADrG,CADA;AAGD,CAJD,EAIG,IAJH,EAIU,YAAY;EAAE,aAAF,CAEpB;EACA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,SAASQ,SAAT,CAAmBC,KAAnB,EAA0B;IACxB,IAAIC,CAAC,GAAG,IAAIH,SAAJ,EAAR;IACA,IAAII,CAAC,GAAGC,KAAK,CAACC,IAAN,CAAWJ,KAAX,CAAR;;IAEA,IAAI,CAACE,CAAC,CAACG,KAAF,CAAQ,UAAUC,CAAV,EAAa;MAAE,OAAO,CAACC,MAAM,CAACC,KAAP,CAAaF,CAAb,CAAR;IAA0B,CAAjD,CAAL,EAAyD;MACvD,MAAMG,SAAS,CAAE,kBAAkBT,KAAlB,GAA0B,4BAA5B,CAAf;IACD;;IACD,IAAIE,CAAC,CAACQ,MAAF,KAAa,EAAjB,EAAqB;MACnB,IAAIC,GAAG,GAAGT,CAAC,CAAC,CAAD,CAAX;MACA,IAAIU,GAAG,GAAGV,CAAC,CAAC,CAAD,CAAX;MACA,IAAIW,GAAG,GAAGX,CAAC,CAAC,CAAD,CAAX;MACA,IAAIY,GAAG,GAAGZ,CAAC,CAAC,CAAD,CAAX;MACA,IAAIa,GAAG,GAAGb,CAAC,CAAC,CAAD,CAAX;MACA,IAAIc,GAAG,GAAGd,CAAC,CAAC,CAAD,CAAX;MACA,IAAIe,GAAG,GAAGf,CAAC,CAAC,CAAD,CAAX;MACA,IAAIgB,GAAG,GAAGhB,CAAC,CAAC,CAAD,CAAX;MACA,IAAIiB,GAAG,GAAGjB,CAAC,CAAC,CAAD,CAAX;MACA,IAAIkB,GAAG,GAAGlB,CAAC,CAAC,CAAD,CAAX;MACA,IAAImB,GAAG,GAAGnB,CAAC,CAAC,EAAD,CAAX;MACA,IAAIoB,GAAG,GAAGpB,CAAC,CAAC,EAAD,CAAX;MACA,IAAIqB,GAAG,GAAGrB,CAAC,CAAC,EAAD,CAAX;MACA,IAAIsB,GAAG,GAAGtB,CAAC,CAAC,EAAD,CAAX;MACA,IAAIuB,GAAG,GAAGvB,CAAC,CAAC,EAAD,CAAX;MACA,IAAIwB,GAAG,GAAGxB,CAAC,CAAC,EAAD,CAAX;MAEAD,CAAC,CAACU,GAAF,GAAQA,GAAR;MACAV,CAAC,CAACC,CAAF,GAAMS,GAAN;MAEAV,CAAC,CAACc,GAAF,GAAQA,GAAR;MACAd,CAAC,CAAC0B,CAAF,GAAMZ,GAAN;MAEAd,CAAC,CAACkB,GAAF,GAAQA,GAAR;MAEAlB,CAAC,CAACsB,GAAF,GAAQA,GAAR;MACAtB,CAAC,CAAC2B,CAAF,GAAML,GAAN;MAEAtB,CAAC,CAACW,GAAF,GAAQA,GAAR;MACAX,CAAC,CAAC4B,CAAF,GAAMjB,GAAN;MAEAX,CAAC,CAACe,GAAF,GAAQA,GAAR;MACAf,CAAC,CAAC6B,CAAF,GAAMd,GAAN;MAEAf,CAAC,CAACmB,GAAF,GAAQA,GAAR;MAEAnB,CAAC,CAACuB,GAAF,GAAQA,GAAR;MACAvB,CAAC,CAAC8B,CAAF,GAAMP,GAAN;MAEAvB,CAAC,CAACY,GAAF,GAAQA,GAAR;MACAZ,CAAC,CAACgB,GAAF,GAAQA,GAAR;MACAhB,CAAC,CAACoB,GAAF,GAAQA,GAAR;MACApB,CAAC,CAACwB,GAAF,GAAQA,GAAR;MACAxB,CAAC,CAACa,GAAF,GAAQA,GAAR;MACAb,CAAC,CAACiB,GAAF,GAAQA,GAAR;MACAjB,CAAC,CAACqB,GAAF,GAAQA,GAAR;MACArB,CAAC,CAACyB,GAAF,GAAQA,GAAR;IACD,CAhDD,MAgDO,IAAIxB,CAAC,CAACQ,MAAF,KAAa,CAAjB,EAAoB;MACzB,IAAIsB,GAAG,GAAG9B,CAAC,CAAC,CAAD,CAAX;MACA,IAAI+B,GAAG,GAAG/B,CAAC,CAAC,CAAD,CAAX;MACA,IAAIgC,GAAG,GAAGhC,CAAC,CAAC,CAAD,CAAX;MACA,IAAIiC,GAAG,GAAGjC,CAAC,CAAC,CAAD,CAAX;MACA,IAAIkC,GAAG,GAAGlC,CAAC,CAAC,CAAD,CAAX;MACA,IAAImC,GAAG,GAAGnC,CAAC,CAAC,CAAD,CAAX;MAEAD,CAAC,CAACU,GAAF,GAAQqB,GAAR;MACA/B,CAAC,CAACC,CAAF,GAAM8B,GAAN;MAEA/B,CAAC,CAACW,GAAF,GAAQqB,GAAR;MACAhC,CAAC,CAAC4B,CAAF,GAAMI,GAAN;MAEAhC,CAAC,CAACc,GAAF,GAAQmB,GAAR;MACAjC,CAAC,CAAC0B,CAAF,GAAMO,GAAN;MAEAjC,CAAC,CAACe,GAAF,GAAQmB,GAAR;MACAlC,CAAC,CAAC6B,CAAF,GAAMK,GAAN;MAEAlC,CAAC,CAACsB,GAAF,GAAQa,GAAR;MACAnC,CAAC,CAAC2B,CAAF,GAAMQ,GAAN;MAEAnC,CAAC,CAACuB,GAAF,GAAQa,GAAR;MACApC,CAAC,CAAC8B,CAAF,GAAMM,GAAN;IACD,CAzBM,MAyBA;MACL,MAAM,IAAI5B,SAAJ,CAAc,+CAAd,CAAN;IACD;;IACD,OAAOR,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASqC,UAAT,CAAoBrC,CAApB,EAAuB;IACrB,IAAIsC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY,IAAIzC,SAAJ,EAAZ,CAAX;;IACA,IAAI,OAAOG,CAAP,KAAa,QAAb,IAAyBsC,IAAI,CAAClC,KAAL,CAAW,UAAUoC,CAAV,EAAa;MAAE,OAAOA,CAAC,IAAIxC,CAAZ;IAAgB,CAA1C,CAA7B,EAA0E;MACxE,OAAOF,SAAS,CACd,CAACE,CAAC,CAACU,GAAH,EAAQV,CAAC,CAACW,GAAV,EAAeX,CAAC,CAACY,GAAjB,EAAsBZ,CAAC,CAACa,GAAxB,EACEb,CAAC,CAACc,GADJ,EACSd,CAAC,CAACe,GADX,EACgBf,CAAC,CAACgB,GADlB,EACuBhB,CAAC,CAACiB,GADzB,EAEEjB,CAAC,CAACkB,GAFJ,EAESlB,CAAC,CAACmB,GAFX,EAEgBnB,CAAC,CAACoB,GAFlB,EAEuBpB,CAAC,CAACqB,GAFzB,EAGErB,CAAC,CAACsB,GAHJ,EAGStB,CAAC,CAACuB,GAHX,EAGgBvB,CAAC,CAACwB,GAHlB,EAGuBxB,CAAC,CAACyB,GAHzB,CADc,CAAhB;IAMD;;IACD,MAAMjB,SAAS,CAAE,kBAAmBiC,IAAI,CAACC,SAAL,CAAe1C,CAAf,CAAnB,GAAwC,6DAA1C,CAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAAS2C,UAAT,CAAoBC,MAApB,EAA4B;IAC1B,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;MAC9B,MAAMpC,SAAS,CAAE,kBAAkBoC,MAAlB,GAA2B,qBAA7B,CAAf;IACD;;IACD,IAAIC,GAAG,GAAGC,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAV;IACA,IAAI/C,CAAC,GAAG,IAAIH,SAAJ,EAAR;IACA,IAAImD,kBAAkB,GAAG,2CAA2CJ,MAA3C,GAAoD,IAA7E,CAN0B,CAQ1B;IACA;IACA;IACA;IACA;;IAEAC,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsB,UAAUpB,CAAV,EAAa;MAAE,OAAOA,CAAP;IAAW,CAAhD,EAAkDqB,OAAlD,CAA0D,UAAUC,EAAV,EAAc;MACtE,IAAIC,GAAG,GAAGD,EAAE,CAACH,KAAH,CAAS,GAAT,CAAV;MACA,IAAIK,IAAI,GAAGD,GAAG,CAAC,CAAD,CAAd;MACA,IAAIE,KAAK,GAAGF,GAAG,CAAC,CAAD,CAAf,CAHsE,CAKtE;;MACA,IAAI,CAACE,KAAL,EAAY;QAAE,MAAM/C,SAAS,CAACwC,kBAAD,CAAf;MAAsC;;MAEpD,IAAIQ,UAAU,GAAGD,KAAK,CAACN,KAAN,CAAY,GAAZ,EACdQ,GADc,CACV,UAAUpD,CAAV,EAAa;QAAE,OAAQA,CAAC,CAACqD,QAAF,CAAW,KAAX,IAAoBC,UAAU,CAACtD,CAAD,CAAV,IAAiB,MAAMuD,IAAI,CAACC,EAA5B,CAApB,GAAsDF,UAAU,CAACtD,CAAD,CAAxE;MAA+E,CADpF,CAAjB;MAGA,IAAIyD,CAAC,GAAGN,UAAU,CAAC,CAAD,CAAlB;MACA,IAAIO,CAAC,GAAGP,UAAU,CAAC,CAAD,CAAlB;MACA,IAAIQ,CAAC,GAAGR,UAAU,CAAC,CAAD,CAAlB;MACA,IAAIvD,CAAC,GAAGuD,UAAU,CAAC,CAAD,CAAlB;MACA,IAAIS,GAAG,GAAG,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAV;MACA,IAAIE,IAAI,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU/D,CAAV,CAAX,CAhBsE,CAkBtE;;MACA,IAAIqD,IAAI,KAAK,aAAT,IAA0BQ,CAA1B,IAA+B,CAACC,CAAD,EAAIC,CAAJ,EAAO5D,KAAP,CAAa,UAAUC,CAAV,EAAa;QAAE,OAAOA,CAAC,KAAK8D,SAAb;MAAyB,CAArD,CAAnC,EAA2F;QACzFnE,CAAC,CAACqB,GAAF,GAAQ,CAAC,CAAD,GAAKyC,CAAb,CADyF,CAE3F;MACC,CAHD,MAGO,IAAIR,IAAI,CAACI,QAAL,CAAc,QAAd,KAA2B,CAAC,CAAD,EAAI,EAAJ,EAAQA,QAAR,CAAiBF,UAAU,CAAC/C,MAA5B,CAA3B,IACN+C,UAAU,CAACpD,KAAX,CAAiB,UAAUC,CAAV,EAAa;QAAE,OAAO,CAACC,MAAM,CAACC,KAAP,CAAa,CAACF,CAAd,CAAR;MAA2B,CAA3D,CADE,EAC4D;QACjE,IAAI+D,MAAM,GAAGZ,UAAU,CAACC,GAAX,CAAe,UAAUpD,CAAV,EAAa;UAAE,OAAQuD,IAAI,CAACS,GAAL,CAAShE,CAAT,IAAc,IAAd,GAAqB,CAArB,GAAyBA,CAAjC;QAAsC,CAApE,CAAb,CADiE,CAEjE;;QACAL,CAAC,GAAGA,CAAC,CAACsE,QAAF,CAAWxE,SAAS,CAACsE,MAAD,CAApB,CAAJ,CAHiE,CAInE;MACC,CANM,MAMA,IAAId,IAAI,KAAK,aAAT,IAA0BW,GAAG,CAAC7D,KAAJ,CAAU,UAAUC,CAAV,EAAa;QAAE,OAAO,CAACC,MAAM,CAACC,KAAP,CAAa,CAACF,CAAd,CAAR;MAA2B,CAApD,CAA9B,EAAqF;QAC1FL,CAAC,GAAGA,CAAC,CAACuE,SAAF,CAAYT,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,CAAJ,CAD0F,CAE5F;MACC,CAHM,MAGA,IAAIV,IAAI,KAAK,WAAT,IAAwBQ,CAAxB,IAA6BE,CAAC,KAAKG,SAAvC,EAAkD;QACvDnE,CAAC,GAAGA,CAAC,CAACuE,SAAF,CAAYT,CAAZ,EAAeC,CAAC,IAAI,CAApB,EAAuB,CAAvB,CAAJ,CADuD,CAEzD;MACC,CAHM,MAGA,IAAIT,IAAI,KAAK,UAAT,IAAuBY,IAAI,CAAC9D,KAAL,CAAW,UAAUC,CAAV,EAAa;QAAE,OAAO,CAACC,MAAM,CAACC,KAAP,CAAa,CAACF,CAAd,CAAR;MAA2B,CAArD,CAAvB,IAAiFJ,CAArF,EAAwF;QAC7FD,CAAC,GAAGA,CAAC,CAACwE,eAAF,CAAkBV,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B/D,CAA3B,CAAJ,CAD6F,CAE/F;MACC,CAHM,MAGA,IAAIqD,IAAI,KAAK,QAAT,IAAqBQ,CAArB,IAA0B,CAACC,CAAD,EAAIC,CAAJ,EAAO5D,KAAP,CAAa,UAAUC,CAAV,EAAa;QAAE,OAAOA,CAAC,KAAK8D,SAAb;MAAyB,CAArD,CAA9B,EAAsF;QAC3FnE,CAAC,GAAGA,CAAC,CAACyE,MAAF,CAAS,CAAT,EAAY,CAAZ,EAAeX,CAAf,CAAJ,CAD2F,CAE7F;MACC,CAHM,MAGA,IAAIR,IAAI,KAAK,SAAT,IAAsBW,GAAG,CAAC7D,KAAJ,CAAU,UAAUC,CAAV,EAAa;QAAE,OAAO,CAACC,MAAM,CAACC,KAAP,CAAa,CAACF,CAAd,CAAR;MAA2B,CAApD,CAAtB,IAA+E4D,GAAG,CAACS,IAAJ,CAAS,UAAUrE,CAAV,EAAa;QAAE,OAAOA,CAAC,KAAK,CAAb;MAAiB,CAAzC,CAAnF,EAA+H;QACpIL,CAAC,GAAGA,CAAC,CAAC2E,KAAF,CAAQb,CAAR,EAAWC,CAAX,EAAcC,CAAd,CAAJ,CADoI,CAEtI;MACC,CAHM,MAGA,IAAIV,IAAI,KAAK,OAAT,IAAoB,CAAChD,MAAM,CAACC,KAAP,CAAauD,CAAb,CAArB,IAAwCA,CAAC,KAAK,CAA9C,IAAmDE,CAAC,KAAKG,SAA7D,EAAwE;QAC7E,IAAIS,IAAI,GAAGtE,MAAM,CAACC,KAAP,CAAa,CAACwD,CAAd,CAAX;QACA,IAAIc,EAAE,GAAGD,IAAI,GAAGd,CAAH,GAAOC,CAApB;QACA/D,CAAC,GAAGA,CAAC,CAAC2E,KAAF,CAAQb,CAAR,EAAWe,EAAX,EAAe,CAAf,CAAJ,CAH6E,CAI/E;MACC,CALM,MAKA,IAAIvB,IAAI,KAAK,MAAT,KAAoBQ,CAAC,IAAK,CAACxD,MAAM,CAACC,KAAP,CAAauD,CAAb,CAAD,IAAoBC,CAA9C,KAAqDC,CAAC,KAAKG,SAA/D,EAA0E;QAC/EnE,CAAC,GAAGA,CAAC,CAAC8E,IAAF,CAAOhB,CAAP,EAAUC,CAAC,IAAI,CAAf,CAAJ;MACD,CAFM,MAEA,IAAI,QAAQgB,IAAR,CAAazB,IAAb,KAAsBQ,CAAtB,IAA2B,CAACC,CAAD,EAAIC,CAAJ,EAAO5D,KAAP,CAAa,UAAUC,CAAV,EAAa;QAAE,OAAOA,CAAC,KAAK8D,SAAb;MAAyB,CAArD,CAA3B,CAAkF;MAAlF,GACN,CAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB,EAAiC,MAAjC,EAAyCO,IAAzC,CAA8C,UAAUM,CAAV,EAAa;QAAE,OAAO1B,IAAI,CAACI,QAAL,CAAcsB,CAAd,CAAP;MAA0B,CAAvF,CADE,EACwF;QAC7F,IAAI,CAAC,OAAD,EAAU,OAAV,EAAmBtB,QAAnB,CAA4BJ,IAA5B,CAAJ,EAAuC;UACrC;UACAtD,CAAC,GAAGA,CAAC,CAACsD,IAAD,CAAD,CAAQQ,CAAR,CAAJ;QACD,CAHD,MAGO;UACL,IAAImB,EAAE,GAAG3B,IAAI,CAACP,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAT;UACA,IAAImC,IAAI,GAAG5B,IAAI,CAACP,OAAL,CAAakC,EAAb,EAAiB,EAAjB,CAAX;UACA,IAAIE,GAAG,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgBC,OAAhB,CAAwBF,IAAxB,CAAV;UACA,IAAIG,GAAG,GAAGJ,EAAE,KAAK,OAAP,GAAiB,CAAjB,GAAqB,CAA/B;UACA,IAAIK,SAAS,GAAG,CACdH,GAAG,KAAK,CAAR,GAAYrB,CAAZ,GAAgBuB,GADF,EAEdF,GAAG,KAAK,CAAR,GAAYrB,CAAZ,GAAgBuB,GAFF,EAGdF,GAAG,KAAK,CAAR,GAAYrB,CAAZ,GAAgBuB,GAHF,CAAhB,CALK,CASL;;UACArF,CAAC,GAAGA,CAAC,CAACiF,EAAD,CAAD,CAAMM,KAAN,CAAYvF,CAAZ,EAAesF,SAAf,CAAJ;QACD;MACF,CAjBM,MAiBA;QACL,MAAM9E,SAAS,CAACwC,kBAAD,CAAf;MACD;IACF,CAtED;IAwEA,OAAOhD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASwF,OAAT,CAAiBxF,CAAjB,EAAoByF,IAApB,EAA0B;IACxB,IAAIA,IAAJ,EAAU;MACR,OAAO,CAACzF,CAAC,CAACC,CAAH,EAAMD,CAAC,CAAC4B,CAAR,EAAW5B,CAAC,CAAC0B,CAAb,EAAgB1B,CAAC,CAAC6B,CAAlB,EAAqB7B,CAAC,CAAC2B,CAAvB,EAA0B3B,CAAC,CAAC8B,CAA5B,CAAP;IACD;;IACD,OAAO,CAAC9B,CAAC,CAACU,GAAH,EAAQV,CAAC,CAACW,GAAV,EAAeX,CAAC,CAACY,GAAjB,EAAsBZ,CAAC,CAACa,GAAxB,EACLb,CAAC,CAACc,GADG,EACEd,CAAC,CAACe,GADJ,EACSf,CAAC,CAACgB,GADX,EACgBhB,CAAC,CAACiB,GADlB,EAELjB,CAAC,CAACkB,GAFG,EAEElB,CAAC,CAACmB,GAFJ,EAESnB,CAAC,CAACoB,GAFX,EAEgBpB,CAAC,CAACqB,GAFlB,EAGLrB,CAAC,CAACsB,GAHG,EAGEtB,CAAC,CAACuB,GAHJ,EAGSvB,CAAC,CAACwB,GAHX,EAGgBxB,CAAC,CAACyB,GAHlB,CAAP;EAID,CAlPmB,CAoPpB;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASiE,SAAT,CAAmB5B,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;IAC1B,IAAIhE,CAAC,GAAG,IAAIH,SAAJ,EAAR;IACAG,CAAC,CAACsB,GAAF,GAAQwC,CAAR;IACA9D,CAAC,CAAC2B,CAAF,GAAMmC,CAAN;IACA9D,CAAC,CAACuB,GAAF,GAAQwC,CAAR;IACA/D,CAAC,CAAC8B,CAAF,GAAMiC,CAAN;IACA/D,CAAC,CAACwB,GAAF,GAAQwC,CAAR;IACA,OAAOhE,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAAS2F,MAAT,CAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;IAC1B,IAAI9F,CAAC,GAAG,IAAIH,SAAJ,EAAR;IACA,IAAIkG,QAAQ,GAAGnC,IAAI,CAACC,EAAL,GAAU,GAAzB;IACA,IAAImC,IAAI,GAAGJ,EAAE,GAAGG,QAAhB;IACA,IAAIE,IAAI,GAAGJ,EAAE,GAAGE,QAAhB;IACA,IAAIG,IAAI,GAAGJ,EAAE,GAAGC,QAAhB,CAL0B,CAO1B;;IACA,IAAII,IAAI,GAAGvC,IAAI,CAACwC,GAAL,CAASJ,IAAT,CAAX;IACA,IAAIK,IAAI,GAAG,CAACzC,IAAI,CAAC0C,GAAL,CAASN,IAAT,CAAZ;IACA,IAAIO,IAAI,GAAG3C,IAAI,CAACwC,GAAL,CAASH,IAAT,CAAX;IACA,IAAIO,IAAI,GAAG,CAAC5C,IAAI,CAAC0C,GAAL,CAASL,IAAT,CAAZ;IACA,IAAIQ,IAAI,GAAG7C,IAAI,CAACwC,GAAL,CAASF,IAAT,CAAX;IACA,IAAIQ,IAAI,GAAG,CAAC9C,IAAI,CAAC0C,GAAL,CAASJ,IAAT,CAAZ;IAEA,IAAIxF,GAAG,GAAG6F,IAAI,GAAGE,IAAjB;IACA,IAAI9F,GAAG,GAAG,CAAC4F,IAAD,GAAQG,IAAlB;IAEA1G,CAAC,CAACU,GAAF,GAAQA,GAAR;IACAV,CAAC,CAACC,CAAF,GAAMS,GAAN;IAEAV,CAAC,CAACW,GAAF,GAAQA,GAAR;IACAX,CAAC,CAAC4B,CAAF,GAAMjB,GAAN;IAEAX,CAAC,CAACY,GAAF,GAAQ4F,IAAR;IAEA,IAAI1F,GAAG,GAAGuF,IAAI,GAAGG,IAAP,GAAcC,IAAd,GAAqBN,IAAI,GAAGO,IAAtC;IACA1G,CAAC,CAACc,GAAF,GAAQA,GAAR;IACAd,CAAC,CAAC0B,CAAF,GAAMZ,GAAN;IAEA,IAAIC,GAAG,GAAGoF,IAAI,GAAGM,IAAP,GAAcJ,IAAI,GAAGG,IAAP,GAAcE,IAAtC;IACA1G,CAAC,CAACe,GAAF,GAAQA,GAAR;IACAf,CAAC,CAAC6B,CAAF,GAAMd,GAAN;IAEAf,CAAC,CAACgB,GAAF,GAAQ,CAACqF,IAAD,GAAQE,IAAhB;IAEAvG,CAAC,CAACkB,GAAF,GAAQmF,IAAI,GAAGK,IAAP,GAAcP,IAAI,GAAGK,IAAP,GAAcC,IAApC;IACAzG,CAAC,CAACmB,GAAF,GAAQkF,IAAI,GAAGI,IAAP,GAAcN,IAAI,GAAGK,IAAP,GAAcE,IAApC;IACA1G,CAAC,CAACoB,GAAF,GAAQ+E,IAAI,GAAGI,IAAf;IAEA,OAAOvG,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAAS2G,eAAT,CAAyB7C,CAAzB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC4C,KAAlC,EAAyC;IACvC,IAAI5G,CAAC,GAAG,IAAIH,SAAJ,EAAR;IACA,IAAIY,MAAM,GAAGmD,IAAI,CAACiD,IAAL,CAAU/C,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAZ,GAAgBC,CAAC,GAAGA,CAA9B,CAAb;;IAEA,IAAIvD,MAAM,KAAK,CAAf,EAAkB;MAChB;MACA,OAAOT,CAAP;IACD;;IAED,IAAI8G,CAAC,GAAGhD,CAAC,GAAGrD,MAAZ;IACA,IAAIsG,CAAC,GAAGhD,CAAC,GAAGtD,MAAZ;IACA,IAAIuG,CAAC,GAAGhD,CAAC,GAAGvD,MAAZ;IAEA,IAAIwG,KAAK,GAAGL,KAAK,IAAIhD,IAAI,CAACC,EAAL,GAAU,GAAd,CAAjB;IACA,IAAIqD,IAAI,GAAGtD,IAAI,CAAC0C,GAAL,CAASW,KAAT,CAAX;IACA,IAAIE,IAAI,GAAGvD,IAAI,CAACwC,GAAL,CAASa,KAAT,CAAX;IACA,IAAIG,KAAK,GAAGF,IAAI,GAAGA,IAAnB;IACA,IAAIG,EAAE,GAAGP,CAAC,GAAGA,CAAb;IACA,IAAIQ,EAAE,GAAGP,CAAC,GAAGA,CAAb;IACA,IAAIQ,EAAE,GAAGP,CAAC,GAAGA,CAAb;IAEA,IAAItG,GAAG,GAAG,IAAI,KAAK4G,EAAE,GAAGC,EAAV,IAAgBH,KAA9B;IACApH,CAAC,CAACU,GAAF,GAAQA,GAAR;IACAV,CAAC,CAACC,CAAF,GAAMS,GAAN;IAEA,IAAIC,GAAG,GAAG,KAAKmG,CAAC,GAAGC,CAAJ,GAAQK,KAAR,GAAgBJ,CAAC,GAAGE,IAAJ,GAAWC,IAAhC,CAAV;IACAnH,CAAC,CAACW,GAAF,GAAQA,GAAR;IACAX,CAAC,CAAC4B,CAAF,GAAMjB,GAAN;IAEAX,CAAC,CAACY,GAAF,GAAQ,KAAKkG,CAAC,GAAGE,CAAJ,GAAQI,KAAR,GAAgBL,CAAC,GAAGG,IAAJ,GAAWC,IAAhC,CAAR;IAEA,IAAIrG,GAAG,GAAG,KAAKiG,CAAC,GAAGD,CAAJ,GAAQM,KAAR,GAAgBJ,CAAC,GAAGE,IAAJ,GAAWC,IAAhC,CAAV;IACAnH,CAAC,CAACc,GAAF,GAAQA,GAAR;IACAd,CAAC,CAAC0B,CAAF,GAAMZ,GAAN;IAEA,IAAIC,GAAG,GAAG,IAAI,KAAKwG,EAAE,GAAGF,EAAV,IAAgBD,KAA9B;IACApH,CAAC,CAACe,GAAF,GAAQA,GAAR;IACAf,CAAC,CAAC6B,CAAF,GAAMd,GAAN;IAEAf,CAAC,CAACgB,GAAF,GAAQ,KAAK+F,CAAC,GAAGC,CAAJ,GAAQI,KAAR,GAAgBN,CAAC,GAAGI,IAAJ,GAAWC,IAAhC,CAAR;IACAnH,CAAC,CAACkB,GAAF,GAAQ,KAAK8F,CAAC,GAAGF,CAAJ,GAAQM,KAAR,GAAgBL,CAAC,GAAGG,IAAJ,GAAWC,IAAhC,CAAR;IACAnH,CAAC,CAACmB,GAAF,GAAQ,KAAK6F,CAAC,GAAGD,CAAJ,GAAQK,KAAR,GAAgBN,CAAC,GAAGI,IAAJ,GAAWC,IAAhC,CAAR;IACAnH,CAAC,CAACoB,GAAF,GAAQ,IAAI,KAAKiG,EAAE,GAAGC,EAAV,IAAgBF,KAA5B;IAEA,OAAOpH,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASwH,KAAT,CAAe1D,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;IACtB,IAAIhE,CAAC,GAAG,IAAIH,SAAJ,EAAR;IACAG,CAAC,CAACU,GAAF,GAAQoD,CAAR;IACA9D,CAAC,CAACC,CAAF,GAAM6D,CAAN;IAEA9D,CAAC,CAACe,GAAF,GAAQgD,CAAR;IACA/D,CAAC,CAAC6B,CAAF,GAAMkC,CAAN;IAEA/D,CAAC,CAACoB,GAAF,GAAQ4C,CAAR;IACA,OAAOhE,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASyH,IAAT,CAAcC,MAAd,EAAsBC,MAAtB,EAA8B;IAC5B,IAAI3H,CAAC,GAAG,IAAIH,SAAJ,EAAR;;IACA,IAAI6H,MAAJ,EAAY;MACV,IAAI1B,IAAI,GAAI0B,MAAM,GAAG9D,IAAI,CAACC,EAAf,GAAqB,GAAhC;MACA,IAAI+D,EAAE,GAAGhE,IAAI,CAACiE,GAAL,CAAS7B,IAAT,CAAT;MACAhG,CAAC,CAACc,GAAF,GAAQ8G,EAAR;MACA5H,CAAC,CAAC0B,CAAF,GAAMkG,EAAN;IACD;;IACD,IAAID,MAAJ,EAAY;MACV,IAAI1B,IAAI,GAAI0B,MAAM,GAAG/D,IAAI,CAACC,EAAf,GAAqB,GAAhC;MACA,IAAIiE,EAAE,GAAGlE,IAAI,CAACiE,GAAL,CAAS5B,IAAT,CAAT;MACAjG,CAAC,CAACW,GAAF,GAAQmH,EAAR;MACA9H,CAAC,CAAC4B,CAAF,GAAMkG,EAAN;IACD;;IACD,OAAO9H,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAAS+H,KAAT,CAAed,KAAf,EAAsB;IACpB,OAAOQ,IAAI,CAACR,KAAD,EAAQ,CAAR,CAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASe,KAAT,CAAef,KAAf,EAAsB;IACpB,OAAOQ,IAAI,CAAC,CAAD,EAAIR,KAAJ,CAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASgB,QAAT,CAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;IACxB,IAAIzH,GAAG,GAAGyH,EAAE,CAACzH,GAAH,GAASwH,EAAE,CAACxH,GAAZ,GAAkByH,EAAE,CAACxH,GAAH,GAASuH,EAAE,CAACpH,GAA9B,GAAoCqH,EAAE,CAACvH,GAAH,GAASsH,EAAE,CAAChH,GAAhD,GAAsDiH,EAAE,CAACtH,GAAH,GAASqH,EAAE,CAAC5G,GAA5E;IACA,IAAIX,GAAG,GAAGwH,EAAE,CAACzH,GAAH,GAASwH,EAAE,CAACvH,GAAZ,GAAkBwH,EAAE,CAACxH,GAAH,GAASuH,EAAE,CAACnH,GAA9B,GAAoCoH,EAAE,CAACvH,GAAH,GAASsH,EAAE,CAAC/G,GAAhD,GAAsDgH,EAAE,CAACtH,GAAH,GAASqH,EAAE,CAAC3G,GAA5E;IACA,IAAIX,GAAG,GAAGuH,EAAE,CAACzH,GAAH,GAASwH,EAAE,CAACtH,GAAZ,GAAkBuH,EAAE,CAACxH,GAAH,GAASuH,EAAE,CAAClH,GAA9B,GAAoCmH,EAAE,CAACvH,GAAH,GAASsH,EAAE,CAAC9G,GAAhD,GAAsD+G,EAAE,CAACtH,GAAH,GAASqH,EAAE,CAAC1G,GAA5E;IACA,IAAIX,GAAG,GAAGsH,EAAE,CAACzH,GAAH,GAASwH,EAAE,CAACrH,GAAZ,GAAkBsH,EAAE,CAACxH,GAAH,GAASuH,EAAE,CAACjH,GAA9B,GAAoCkH,EAAE,CAACvH,GAAH,GAASsH,EAAE,CAAC7G,GAAhD,GAAsD8G,EAAE,CAACtH,GAAH,GAASqH,EAAE,CAACzG,GAA5E;IAEA,IAAIX,GAAG,GAAGqH,EAAE,CAACrH,GAAH,GAASoH,EAAE,CAACxH,GAAZ,GAAkByH,EAAE,CAACpH,GAAH,GAASmH,EAAE,CAACpH,GAA9B,GAAoCqH,EAAE,CAACnH,GAAH,GAASkH,EAAE,CAAChH,GAAhD,GAAsDiH,EAAE,CAAClH,GAAH,GAASiH,EAAE,CAAC5G,GAA5E;IACA,IAAIP,GAAG,GAAGoH,EAAE,CAACrH,GAAH,GAASoH,EAAE,CAACvH,GAAZ,GAAkBwH,EAAE,CAACpH,GAAH,GAASmH,EAAE,CAACnH,GAA9B,GAAoCoH,EAAE,CAACnH,GAAH,GAASkH,EAAE,CAAC/G,GAAhD,GAAsDgH,EAAE,CAAClH,GAAH,GAASiH,EAAE,CAAC3G,GAA5E;IACA,IAAIP,GAAG,GAAGmH,EAAE,CAACrH,GAAH,GAASoH,EAAE,CAACtH,GAAZ,GAAkBuH,EAAE,CAACpH,GAAH,GAASmH,EAAE,CAAClH,GAA9B,GAAoCmH,EAAE,CAACnH,GAAH,GAASkH,EAAE,CAAC9G,GAAhD,GAAsD+G,EAAE,CAAClH,GAAH,GAASiH,EAAE,CAAC1G,GAA5E;IACA,IAAIP,GAAG,GAAGkH,EAAE,CAACrH,GAAH,GAASoH,EAAE,CAACrH,GAAZ,GAAkBsH,EAAE,CAACpH,GAAH,GAASmH,EAAE,CAACjH,GAA9B,GAAoCkH,EAAE,CAACnH,GAAH,GAASkH,EAAE,CAAC7G,GAAhD,GAAsD8G,EAAE,CAAClH,GAAH,GAASiH,EAAE,CAACzG,GAA5E;IAEA,IAAIP,GAAG,GAAGiH,EAAE,CAACjH,GAAH,GAASgH,EAAE,CAACxH,GAAZ,GAAkByH,EAAE,CAAChH,GAAH,GAAS+G,EAAE,CAACpH,GAA9B,GAAoCqH,EAAE,CAAC/G,GAAH,GAAS8G,EAAE,CAAChH,GAAhD,GAAsDiH,EAAE,CAAC9G,GAAH,GAAS6G,EAAE,CAAC5G,GAA5E;IACA,IAAIH,GAAG,GAAGgH,EAAE,CAACjH,GAAH,GAASgH,EAAE,CAACvH,GAAZ,GAAkBwH,EAAE,CAAChH,GAAH,GAAS+G,EAAE,CAACnH,GAA9B,GAAoCoH,EAAE,CAAC/G,GAAH,GAAS8G,EAAE,CAAC/G,GAAhD,GAAsDgH,EAAE,CAAC9G,GAAH,GAAS6G,EAAE,CAAC3G,GAA5E;IACA,IAAIH,GAAG,GAAG+G,EAAE,CAACjH,GAAH,GAASgH,EAAE,CAACtH,GAAZ,GAAkBuH,EAAE,CAAChH,GAAH,GAAS+G,EAAE,CAAClH,GAA9B,GAAoCmH,EAAE,CAAC/G,GAAH,GAAS8G,EAAE,CAAC9G,GAAhD,GAAsD+G,EAAE,CAAC9G,GAAH,GAAS6G,EAAE,CAAC1G,GAA5E;IACA,IAAIH,GAAG,GAAG8G,EAAE,CAACjH,GAAH,GAASgH,EAAE,CAACrH,GAAZ,GAAkBsH,EAAE,CAAChH,GAAH,GAAS+G,EAAE,CAACjH,GAA9B,GAAoCkH,EAAE,CAAC/G,GAAH,GAAS8G,EAAE,CAAC7G,GAAhD,GAAsD8G,EAAE,CAAC9G,GAAH,GAAS6G,EAAE,CAACzG,GAA5E;IAEA,IAAIH,GAAG,GAAG6G,EAAE,CAAC7G,GAAH,GAAS4G,EAAE,CAACxH,GAAZ,GAAkByH,EAAE,CAAC5G,GAAH,GAAS2G,EAAE,CAACpH,GAA9B,GAAoCqH,EAAE,CAAC3G,GAAH,GAAS0G,EAAE,CAAChH,GAAhD,GAAsDiH,EAAE,CAAC1G,GAAH,GAASyG,EAAE,CAAC5G,GAA5E;IACA,IAAIC,GAAG,GAAG4G,EAAE,CAAC7G,GAAH,GAAS4G,EAAE,CAACvH,GAAZ,GAAkBwH,EAAE,CAAC5G,GAAH,GAAS2G,EAAE,CAACnH,GAA9B,GAAoCoH,EAAE,CAAC3G,GAAH,GAAS0G,EAAE,CAAC/G,GAAhD,GAAsDgH,EAAE,CAAC1G,GAAH,GAASyG,EAAE,CAAC3G,GAA5E;IACA,IAAIC,GAAG,GAAG2G,EAAE,CAAC7G,GAAH,GAAS4G,EAAE,CAACtH,GAAZ,GAAkBuH,EAAE,CAAC5G,GAAH,GAAS2G,EAAE,CAAClH,GAA9B,GAAoCmH,EAAE,CAAC3G,GAAH,GAAS0G,EAAE,CAAC9G,GAAhD,GAAsD+G,EAAE,CAAC1G,GAAH,GAASyG,EAAE,CAAC1G,GAA5E;IACA,IAAIC,GAAG,GAAG0G,EAAE,CAAC7G,GAAH,GAAS4G,EAAE,CAACrH,GAAZ,GAAkBsH,EAAE,CAAC5G,GAAH,GAAS2G,EAAE,CAACjH,GAA9B,GAAoCkH,EAAE,CAAC3G,GAAH,GAAS0G,EAAE,CAAC7G,GAAhD,GAAsD8G,EAAE,CAAC1G,GAAH,GAASyG,EAAE,CAACzG,GAA5E;IAEA,OAAO3B,SAAS,CACd,CAACY,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,EACEC,GADF,EACOC,GADP,EACYC,GADZ,EACiBC,GADjB,EAEEC,GAFF,EAEOC,GAFP,EAEYC,GAFZ,EAEiBC,GAFjB,EAGEC,GAHF,EAGOC,GAHP,EAGYC,GAHZ,EAGiBC,GAHjB,CADc,CAAhB;EAMD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAEE,IAAI5B,SAAS,GAAG,SAASA,SAAT,GAAqB;IACnC,IAAIuI,IAAI,GAAG,EAAX;IAAA,IAAeC,GAAG,GAAGC,SAAS,CAAC7H,MAA/B;;IACA,OAAQ4H,GAAG,EAAX,EAAgBD,IAAI,CAAEC,GAAF,CAAJ,GAAcC,SAAS,CAAED,GAAF,CAAvB;;IAEhB,IAAIrI,CAAC,GAAG,IAAR,CAJmC,CAKnC;;IACAA,CAAC,CAACC,CAAF,GAAM,CAAN;IAASD,CAAC,CAAC4B,CAAF,GAAM,CAAN;IACT5B,CAAC,CAAC0B,CAAF,GAAM,CAAN;IAAS1B,CAAC,CAAC6B,CAAF,GAAM,CAAN;IACT7B,CAAC,CAAC2B,CAAF,GAAM,CAAN;IAAS3B,CAAC,CAAC8B,CAAF,GAAM,CAAN,CAR0B,CASnC;;IACA9B,CAAC,CAACU,GAAF,GAAQ,CAAR;IAAWV,CAAC,CAACW,GAAF,GAAQ,CAAR;IAAWX,CAAC,CAACY,GAAF,GAAQ,CAAR;IAAWZ,CAAC,CAACa,GAAF,GAAQ,CAAR;IACjCb,CAAC,CAACc,GAAF,GAAQ,CAAR;IAAWd,CAAC,CAACe,GAAF,GAAQ,CAAR;IAAWf,CAAC,CAACgB,GAAF,GAAQ,CAAR;IAAWhB,CAAC,CAACiB,GAAF,GAAQ,CAAR;IACjCjB,CAAC,CAACkB,GAAF,GAAQ,CAAR;IAAWlB,CAAC,CAACmB,GAAF,GAAQ,CAAR;IAAWnB,CAAC,CAACoB,GAAF,GAAQ,CAAR;IAAWpB,CAAC,CAACqB,GAAF,GAAQ,CAAR;IACjCrB,CAAC,CAACsB,GAAF,GAAQ,CAAR;IAAWtB,CAAC,CAACuB,GAAF,GAAQ,CAAR;IAAWvB,CAAC,CAACwB,GAAF,GAAQ,CAAR;IAAWxB,CAAC,CAACyB,GAAF,GAAQ,CAAR;;IAEjC,IAAI2G,IAAI,CAAC3H,MAAT,EAAiB;MACf,IAAI8H,IAAI,GAAG,CAAC,EAAD,EAAK,CAAL,EAAQ7D,IAAR,CAAa,UAAU8D,CAAV,EAAa;QAAE,OAAOA,CAAC,KAAKJ,IAAI,CAAC3H,MAAlB;MAA2B,CAAvD,IAA2D2H,IAA3D,GAAkEA,IAAI,CAAC,CAAD,CAAjF;MAEA,OAAOpI,CAAC,CAACyI,cAAF,CAAiBF,IAAjB,CAAP;IACD;;IACD,OAAOvI,CAAP;EACD,CArBD;;EAuBA,IAAI0I,kBAAkB,GAAG;IAAEC,UAAU,EAAE;MAAEC,YAAY,EAAE;IAAhB,CAAd;IAAqCnD,IAAI,EAAE;MAAEmD,YAAY,EAAE;IAAhB;EAA3C,CAAzB;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EACEF,kBAAkB,CAACC,UAAnB,CAA8BE,GAA9B,GAAoC,YAAY;IAC9C,IAAI7I,CAAC,GAAG,IAAR;IACA,OAAQA,CAAC,CAACU,GAAF,KAAU,CAAV,IAAeV,CAAC,CAACW,GAAF,KAAU,CAAzB,IAA8BX,CAAC,CAACY,GAAF,KAAU,CAAxC,IAA6CZ,CAAC,CAACa,GAAF,KAAU,CAAvD,IACGb,CAAC,CAACc,GAAF,KAAU,CADb,IACkBd,CAAC,CAACe,GAAF,KAAU,CAD5B,IACiCf,CAAC,CAACgB,GAAF,KAAU,CAD3C,IACgDhB,CAAC,CAACiB,GAAF,KAAU,CAD1D,IAEGjB,CAAC,CAACkB,GAAF,KAAU,CAFb,IAEkBlB,CAAC,CAACmB,GAAF,KAAU,CAF5B,IAEiCnB,CAAC,CAACoB,GAAF,KAAU,CAF3C,IAEgDpB,CAAC,CAACqB,GAAF,KAAU,CAF1D,IAGGrB,CAAC,CAACsB,GAAF,KAAU,CAHb,IAGkBtB,CAAC,CAACuB,GAAF,KAAU,CAH5B,IAGiCvB,CAAC,CAACwB,GAAF,KAAU,CAH3C,IAGgDxB,CAAC,CAACyB,GAAF,KAAU,CAHlE;EAID,CAND;EAQA;AACF;AACA;AACA;AACA;AACA;;;EACEiH,kBAAkB,CAACjD,IAAnB,CAAwBoD,GAAxB,GAA8B,YAAY;IACxC,IAAI7I,CAAC,GAAG,IAAR;IACA,OAAQA,CAAC,CAACkB,GAAF,KAAU,CAAV,IAAelB,CAAC,CAACmB,GAAF,KAAU,CAAzB,IAA8BnB,CAAC,CAACoB,GAAF,KAAU,CAAxC,IAA6CpB,CAAC,CAACqB,GAAF,KAAU,CAAvD,IAA4DrB,CAAC,CAACwB,GAAF,KAAU,CAAtE,IAA2ExB,CAAC,CAACyB,GAAF,KAAU,CAA7F;EACD,CAHD;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE5B,SAAS,CAACiJ,SAAV,CAAoBL,cAApB,GAAqC,SAASA,cAAT,CAAyB7F,MAAzB,EAAiC;IACpE,IAAI5C,CAAC,GAAG,IAAR,CADoE,CAGpE;;IACA,IAAI,OAAO4C,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACnC,MAArC,IAA+CmC,MAAM,KAAK,MAA9D,EAAsE;MACpE,OAAOD,UAAU,CAACC,MAAD,CAAjB;IACD,CANmE,CAOpE;;;IACA,IAAI,CAAC1C,KAAD,EAAQ6I,YAAR,EAAsBC,YAAtB,EAAoCtE,IAApC,CAAyC,UAAUzE,CAAV,EAAa;MAAE,OAAO2C,MAAM,YAAY3C,CAAzB;IAA6B,CAArF,CAAJ,EAA4F;MAC1F;MACA,OAAOH,SAAS,CAAC8C,MAAD,CAAhB;IACD,CAXmE,CAYpE;;;IACA,IAAI,CAAC/C,SAAD,EAAYoJ,SAAZ,EAAuB1G,MAAvB,EAA+BmC,IAA/B,CAAoC,UAAUzE,CAAV,EAAa;MAAE,OAAO2C,MAAM,YAAY3C,CAAzB;IAA6B,CAAhF,CAAJ,EAAuF;MACrF;MACA,OAAOoC,UAAU,CAACO,MAAD,CAAjB;IACD;;IAED,OAAO5C,CAAP;EACD,CAnBD;EAqBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEH,SAAS,CAACiJ,SAAV,CAAoBI,cAApB,GAAqC,SAASA,cAAT,CAAyBzD,IAAzB,EAA+B;IAClE,OAAOuD,YAAY,CAAC7I,IAAb,CAAkBqF,OAAO,CAAC,IAAD,EAAOC,IAAP,CAAzB,CAAP;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE5F,SAAS,CAACiJ,SAAV,CAAoBK,cAApB,GAAqC,SAASA,cAAT,CAAyB1D,IAAzB,EAA+B;IAClE,OAAOsD,YAAY,CAAC5I,IAAb,CAAkBqF,OAAO,CAAC,IAAD,EAAOC,IAAP,CAAzB,CAAP;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE5F,SAAS,CAACiJ,SAAV,CAAoBM,QAApB,GAA+B,SAASA,QAAT,GAAqB;IAClD,IAAIpJ,CAAC,GAAG,IAAR;IACA,IAAIyF,IAAI,GAAGzF,CAAC,CAACyF,IAAb;IACA,IAAIrB,MAAM,GAAGpE,CAAC,CAACmJ,cAAF,CAAiB1D,IAAjB,EAAuB4D,IAAvB,CAA4B,IAA5B,CAAb;IACA,IAAIC,IAAI,GAAG7D,IAAI,GAAG,QAAH,GAAc,UAA7B;IACA,OAAQ6D,IAAI,GAAG,GAAP,GAAalF,MAAb,GAAsB,GAA9B;EACD,CAND;EAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEvE,SAAS,CAACiJ,SAAV,CAAoBS,MAApB,GAA6B,SAASA,MAAT,GAAmB;IAC9C,IAAIvJ,CAAC,GAAG,IAAR;IACA,IAAIyF,IAAI,GAAGzF,CAAC,CAACyF,IAAb;IACE,IAAIkD,UAAU,GAAG3I,CAAC,CAAC2I,UAAnB;IACF,OAAOpG,MAAM,CAACiH,MAAP,CAAc,EAAd,EAAkBxJ,CAAlB,EAAqB;MAACyF,IAAI,EAAEA,IAAP;MAAakD,UAAU,EAAEA;IAAzB,CAArB,CAAP;EACD,CALD;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE9I,SAAS,CAACiJ,SAAV,CAAoBxE,QAApB,GAA+B,SAASA,QAAT,CAAmB6D,EAAnB,EAAuB;IACpD,OAAOF,QAAQ,CAAC,IAAD,EAAOE,EAAP,CAAf;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEtI,SAAS,CAACiJ,SAAV,CAAoBvE,SAApB,GAAgC,SAASA,SAAT,CAAoBT,CAApB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;IAC3D,IAAI8C,CAAC,GAAGhD,CAAR;IACA,IAAIiD,CAAC,GAAGhD,CAAR;IACA,IAAIiD,CAAC,GAAGhD,CAAR;;IACA,IAAI+C,CAAC,KAAK5C,SAAV,EAAqB;MAAE4C,CAAC,GAAG,CAAJ;IAAQ;;IAC/B,IAAIC,CAAC,KAAK7C,SAAV,EAAqB;MAAE6C,CAAC,GAAG,CAAJ;IAAQ;;IAC/B,OAAOiB,QAAQ,CAAC,IAAD,EAAOvC,SAAS,CAACoB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB,CAAf;EACD,CAPD;EASA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEnH,SAAS,CAACiJ,SAAV,CAAoBnE,KAApB,GAA4B,SAASA,KAAT,CAAgBb,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;IACnD,IAAI8C,CAAC,GAAGhD,CAAR;IACA,IAAIiD,CAAC,GAAGhD,CAAR;IACA,IAAIiD,CAAC,GAAGhD,CAAR;;IACA,IAAI+C,CAAC,KAAK5C,SAAV,EAAqB;MAAE4C,CAAC,GAAGjD,CAAJ;IAAQ;;IAC/B,IAAIkD,CAAC,KAAK7C,SAAV,EAAqB;MAAE6C,CAAC,GAAG,CAAJ;IAAQ,CALoB,CAKnB;;;IAEhC,OAAOiB,QAAQ,CAAC,IAAD,EAAOT,KAAK,CAACV,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAZ,CAAf;EACD,CARD;EAUA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEnH,SAAS,CAACiJ,SAAV,CAAoBrE,MAApB,GAA6B,SAASA,MAAT,CAAiBmB,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6B;IACxD,IAAI2D,EAAE,GAAG7D,EAAT;IACA,IAAI8D,EAAE,GAAG7D,EAAE,IAAI,CAAf;IACA,IAAI8D,EAAE,GAAG7D,EAAE,IAAI,CAAf;;IAEA,IAAI,OAAOF,EAAP,KAAc,QAAd,IAA0BC,EAAE,KAAK1B,SAAjC,IAA8C2B,EAAE,KAAK3B,SAAzD,EAAoE;MAClEwF,EAAE,GAAGF,EAAL;MAASA,EAAE,GAAG,CAAL;MAAQC,EAAE,GAAG,CAAL;IAClB;;IAED,OAAOzB,QAAQ,CAAC,IAAD,EAAOtC,MAAM,CAAC8D,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAb,CAAf;EACD,CAVD;EAYA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE9J,SAAS,CAACiJ,SAAV,CAAoBtE,eAApB,GAAsC,SAASA,eAAT,CAA0BV,CAA1B,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmCiD,KAAnC,EAA0C;IAC9E,IAAI,CAACnD,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUiD,KAAV,EAAiBvC,IAAjB,CAAsB,UAAUrE,CAAV,EAAa;MAAE,OAAOC,MAAM,CAACC,KAAP,CAAa,CAACF,CAAd,CAAP;IAA0B,CAA/D,CAAJ,EAAsE;MACpE,MAAM,IAAIG,SAAJ,CAAc,+BAAd,CAAN;IACD;;IACD,OAAOyH,QAAQ,CAAC,IAAD,EAAOtB,eAAe,CAAC7C,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUiD,KAAV,CAAtB,CAAf;EACD,CALD;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEpH,SAAS,CAACiJ,SAAV,CAAoBc,KAApB,GAA4B,SAASA,KAAT,CAAgB3C,KAAhB,EAAuB;IACjD,OAAOgB,QAAQ,CAAC,IAAD,EAAOF,KAAK,CAACd,KAAD,CAAZ,CAAf;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEpH,SAAS,CAACiJ,SAAV,CAAoBe,KAApB,GAA4B,SAASA,KAAT,CAAgB5C,KAAhB,EAAuB;IACjD,OAAOgB,QAAQ,CAAC,IAAD,EAAOD,KAAK,CAACf,KAAD,CAAZ,CAAf;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEpH,SAAS,CAACiJ,SAAV,CAAoBhE,IAApB,GAA2B,SAASA,IAAT,CAAe4C,MAAf,EAAuBC,MAAvB,EAA+B;IACxD,OAAOM,QAAQ,CAAC,IAAD,EAAOR,IAAI,CAACC,MAAD,EAASC,MAAT,CAAX,CAAf;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE9H,SAAS,CAACiJ,SAAV,CAAoBgB,cAApB,GAAqC,SAASA,cAAT,CAAyBC,CAAzB,EAA4B;IAC/D,IAAI/J,CAAC,GAAG,IAAR;IAEA,IAAI8D,CAAC,GAAG9D,CAAC,CAACU,GAAF,GAAQqJ,CAAC,CAACjG,CAAV,GAAc9D,CAAC,CAACc,GAAF,GAAQiJ,CAAC,CAAChG,CAAxB,GAA4B/D,CAAC,CAACkB,GAAF,GAAQ6I,CAAC,CAAC/F,CAAtC,GAA0ChE,CAAC,CAACsB,GAAF,GAAQyI,CAAC,CAACC,CAA5D;IACA,IAAIjG,CAAC,GAAG/D,CAAC,CAACW,GAAF,GAAQoJ,CAAC,CAACjG,CAAV,GAAc9D,CAAC,CAACe,GAAF,GAAQgJ,CAAC,CAAChG,CAAxB,GAA4B/D,CAAC,CAACmB,GAAF,GAAQ4I,CAAC,CAAC/F,CAAtC,GAA0ChE,CAAC,CAACuB,GAAF,GAAQwI,CAAC,CAACC,CAA5D;IACA,IAAIhG,CAAC,GAAGhE,CAAC,CAACY,GAAF,GAAQmJ,CAAC,CAACjG,CAAV,GAAc9D,CAAC,CAACgB,GAAF,GAAQ+I,CAAC,CAAChG,CAAxB,GAA4B/D,CAAC,CAACoB,GAAF,GAAQ2I,CAAC,CAAC/F,CAAtC,GAA0ChE,CAAC,CAACwB,GAAF,GAAQuI,CAAC,CAACC,CAA5D;IACA,IAAIA,CAAC,GAAGhK,CAAC,CAACa,GAAF,GAAQkJ,CAAC,CAACjG,CAAV,GAAc9D,CAAC,CAACiB,GAAF,GAAQ8I,CAAC,CAAChG,CAAxB,GAA4B/D,CAAC,CAACqB,GAAF,GAAQ0I,CAAC,CAAC/F,CAAtC,GAA0ChE,CAAC,CAACyB,GAAF,GAAQsI,CAAC,CAACC,CAA5D;IAEA,OAAOD,CAAC,YAAYE,QAAb,GACH,IAAIA,QAAJ,CAAanG,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBgG,CAAtB,CADG,GAEH;MACAlG,CAAC,EAAEA,CADH;MACMC,CAAC,EAAEA,CADT;MACYC,CAAC,EAAEA,CADf;MACkBgG,CAAC,EAAEA;IADrB,CAFJ;EAKD,CAbD;;EAeAzH,MAAM,CAAC2H,gBAAP,CAAyBrK,SAAS,CAACiJ,SAAnC,EAA8CJ,kBAA9C,EAnyBoB,CAqyBpB;EACA;;EACAnG,MAAM,CAACiH,MAAP,CAAc3J,SAAd,EAAyB;IACvB6F,SAAS,EAAEA,SADY;IAEvBC,MAAM,EAAEA,MAFe;IAGvBgB,eAAe,EAAEA,eAHM;IAIvBa,KAAK,EAAEA,KAJgB;IAKvBO,KAAK,EAAEA,KALgB;IAMvBC,KAAK,EAAEA,KANgB;IAOvBP,IAAI,EAAEA,IAPiB;IAQvBQ,QAAQ,EAAEA,QARa;IASvBnI,SAAS,EAAEA,SATY;IAUvBuC,UAAU,EAAEA,UAVW;IAWvBM,UAAU,EAAEA,UAXW;IAYvB6C,OAAO,EAAEA;EAZc,CAAzB;EAeA,IAAI2E,OAAO,GAAG,OAAd;EAEA;AACF;AACA;AACA;;EACE,IAAIC,OAAO,GAAGD,OAAd;EAEA;;EAEA5H,MAAM,CAACiH,MAAP,CAAc3J,SAAd,EAAyB;IAAEuK,OAAO,EAAEA;EAAX,CAAzB;EAEA,OAAOvK,SAAP;AAED,CAx0BD"},"metadata":{},"sourceType":"script"}