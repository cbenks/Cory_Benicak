{"ast":null,"code":"/**\n * web-streams-polyfill v3.2.1\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n})(this, function (exports) {\n  'use strict'; /// <reference lib=\"es2015.symbol\" />\n\n  var SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol : function (description) {\n    return \"Symbol(\" + description + \")\";\n  }; /// <reference lib=\"dom\" />\n\n  function noop() {\n    return undefined;\n  }\n\n  function getGlobals() {\n    if (typeof self !== 'undefined') {\n      return self;\n    } else if (typeof window !== 'undefined') {\n      return window;\n    } else if (typeof global !== 'undefined') {\n      return global;\n    }\n\n    return undefined;\n  }\n\n  var globals = getGlobals();\n\n  function typeIsObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n\n  var rethrowAssertionErrorRejection = noop;\n  var originalPromise = Promise;\n  var originalPromiseThen = Promise.prototype.then;\n  var originalPromiseResolve = Promise.resolve.bind(originalPromise);\n  var originalPromiseReject = Promise.reject.bind(originalPromise);\n\n  function newPromise(executor) {\n    return new originalPromise(executor);\n  }\n\n  function promiseResolvedWith(value) {\n    return originalPromiseResolve(value);\n  }\n\n  function promiseRejectedWith(reason) {\n    return originalPromiseReject(reason);\n  }\n\n  function PerformPromiseThen(promise, onFulfilled, onRejected) {\n    // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n    // approximation.\n    return originalPromiseThen.call(promise, onFulfilled, onRejected);\n  }\n\n  function uponPromise(promise, onFulfilled, onRejected) {\n    PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n  }\n\n  function uponFulfillment(promise, onFulfilled) {\n    uponPromise(promise, onFulfilled);\n  }\n\n  function uponRejection(promise, onRejected) {\n    uponPromise(promise, undefined, onRejected);\n  }\n\n  function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n    return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n  }\n\n  function setPromiseIsHandledToTrue(promise) {\n    PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n  }\n\n  var queueMicrotask = function () {\n    var globalQueueMicrotask = globals && globals.queueMicrotask;\n\n    if (typeof globalQueueMicrotask === 'function') {\n      return globalQueueMicrotask;\n    }\n\n    var resolvedPromise = promiseResolvedWith(undefined);\n    return function (fn) {\n      return PerformPromiseThen(resolvedPromise, fn);\n    };\n  }();\n\n  function reflectCall(F, V, args) {\n    if (typeof F !== 'function') {\n      throw new TypeError('Argument is not a function');\n    }\n\n    return Function.prototype.apply.call(F, V, args);\n  }\n\n  function promiseCall(F, V, args) {\n    try {\n      return promiseResolvedWith(reflectCall(F, V, args));\n    } catch (value) {\n      return promiseRejectedWith(value);\n    }\n  } // Original from Chromium\n  // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\n\n  var QUEUE_MAX_ARRAY_SIZE = 16384;\n  /**\n   * Simple queue structure.\n   *\n   * Avoids scalability issues with using a packed array directly by using\n   * multiple arrays in a linked list and keeping the array size bounded.\n   */\n\n  var SimpleQueue =\n  /** @class */\n  function () {\n    function SimpleQueue() {\n      this._cursor = 0;\n      this._size = 0; // _front and _back are always defined.\n\n      this._front = {\n        _elements: [],\n        _next: undefined\n      };\n      this._back = this._front; // The cursor is used to avoid calling Array.shift().\n      // It contains the index of the front element of the array inside the\n      // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n\n      this._cursor = 0; // When there is only one node, size === elements.length - cursor.\n\n      this._size = 0;\n    }\n\n    Object.defineProperty(SimpleQueue.prototype, \"length\", {\n      get: function () {\n        return this._size;\n      },\n      enumerable: false,\n      configurable: true\n    }); // For exception safety, this method is structured in order:\n    // 1. Read state\n    // 2. Calculate required state mutations\n    // 3. Perform state mutations\n\n    SimpleQueue.prototype.push = function (element) {\n      var oldBack = this._back;\n      var newBack = oldBack;\n\n      if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n        newBack = {\n          _elements: [],\n          _next: undefined\n        };\n      } // push() is the mutation most likely to throw an exception, so it\n      // goes first.\n\n\n      oldBack._elements.push(element);\n\n      if (newBack !== oldBack) {\n        this._back = newBack;\n        oldBack._next = newBack;\n      }\n\n      ++this._size;\n    }; // Like push(), shift() follows the read -> calculate -> mutate pattern for\n    // exception safety.\n\n\n    SimpleQueue.prototype.shift = function () {\n      // must not be called on an empty queue\n      var oldFront = this._front;\n      var newFront = oldFront;\n      var oldCursor = this._cursor;\n      var newCursor = oldCursor + 1;\n      var elements = oldFront._elements;\n      var element = elements[oldCursor];\n\n      if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n        newFront = oldFront._next;\n        newCursor = 0;\n      } // No mutations before this point.\n\n\n      --this._size;\n      this._cursor = newCursor;\n\n      if (oldFront !== newFront) {\n        this._front = newFront;\n      } // Permit shifted element to be garbage collected.\n\n\n      elements[oldCursor] = undefined;\n      return element;\n    }; // The tricky thing about forEach() is that it can be called\n    // re-entrantly. The queue may be mutated inside the callback. It is easy to\n    // see that push() within the callback has no negative effects since the end\n    // of the queue is checked for on every iteration. If shift() is called\n    // repeatedly within the callback then the next iteration may return an\n    // element that has been removed. In this case the callback will be called\n    // with undefined values until we either \"catch up\" with elements that still\n    // exist or reach the back of the queue.\n\n\n    SimpleQueue.prototype.forEach = function (callback) {\n      var i = this._cursor;\n      var node = this._front;\n      var elements = node._elements;\n\n      while (i !== elements.length || node._next !== undefined) {\n        if (i === elements.length) {\n          node = node._next;\n          elements = node._elements;\n          i = 0;\n\n          if (elements.length === 0) {\n            break;\n          }\n        }\n\n        callback(elements[i]);\n        ++i;\n      }\n    }; // Return the element that would be returned if shift() was called now,\n    // without modifying the queue.\n\n\n    SimpleQueue.prototype.peek = function () {\n      // must not be called on an empty queue\n      var front = this._front;\n      var cursor = this._cursor;\n      return front._elements[cursor];\n    };\n\n    return SimpleQueue;\n  }();\n\n  function ReadableStreamReaderGenericInitialize(reader, stream) {\n    reader._ownerReadableStream = stream;\n    stream._reader = reader;\n\n    if (stream._state === 'readable') {\n      defaultReaderClosedPromiseInitialize(reader);\n    } else if (stream._state === 'closed') {\n      defaultReaderClosedPromiseInitializeAsResolved(reader);\n    } else {\n      defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    }\n  } // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n  // check.\n\n\n  function ReadableStreamReaderGenericCancel(reader, reason) {\n    var stream = reader._ownerReadableStream;\n    return ReadableStreamCancel(stream, reason);\n  }\n\n  function ReadableStreamReaderGenericRelease(reader) {\n    if (reader._ownerReadableStream._state === 'readable') {\n      defaultReaderClosedPromiseReject(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n    } else {\n      defaultReaderClosedPromiseResetToRejected(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n    }\n\n    reader._ownerReadableStream._reader = undefined;\n    reader._ownerReadableStream = undefined;\n  } // Helper functions for the readers.\n\n\n  function readerLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released reader');\n  } // Helper functions for the ReadableStreamDefaultReader.\n\n\n  function defaultReaderClosedPromiseInitialize(reader) {\n    reader._closedPromise = newPromise(function (resolve, reject) {\n      reader._closedPromise_resolve = resolve;\n      reader._closedPromise_reject = reject;\n    });\n  }\n\n  function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseReject(reader, reason);\n  }\n\n  function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseResolve(reader);\n  }\n\n  function defaultReaderClosedPromiseReject(reader, reason) {\n    if (reader._closedPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(reader._closedPromise);\n\n    reader._closedPromise_reject(reason);\n\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n\n  function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n    defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n  }\n\n  function defaultReaderClosedPromiseResolve(reader) {\n    if (reader._closedPromise_resolve === undefined) {\n      return;\n    }\n\n    reader._closedPromise_resolve(undefined);\n\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n\n  var AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n  var ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n  var CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n  var PullSteps = SymbolPolyfill('[[PullSteps]]'); /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n\n  var NumberIsFinite = Number.isFinite || function (x) {\n    return typeof x === 'number' && isFinite(x);\n  }; /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n\n\n  var MathTrunc = Math.trunc || function (v) {\n    return v < 0 ? Math.ceil(v) : Math.floor(v);\n  }; // https://heycam.github.io/webidl/#idl-dictionaries\n\n\n  function isDictionary(x) {\n    return typeof x === 'object' || typeof x === 'function';\n  }\n\n  function assertDictionary(obj, context) {\n    if (obj !== undefined && !isDictionary(obj)) {\n      throw new TypeError(context + \" is not an object.\");\n    }\n  } // https://heycam.github.io/webidl/#idl-callback-functions\n\n\n  function assertFunction(x, context) {\n    if (typeof x !== 'function') {\n      throw new TypeError(context + \" is not a function.\");\n    }\n  } // https://heycam.github.io/webidl/#idl-object\n\n\n  function isObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n\n  function assertObject(x, context) {\n    if (!isObject(x)) {\n      throw new TypeError(context + \" is not an object.\");\n    }\n  }\n\n  function assertRequiredArgument(x, position, context) {\n    if (x === undefined) {\n      throw new TypeError(\"Parameter \" + position + \" is required in '\" + context + \"'.\");\n    }\n  }\n\n  function assertRequiredField(x, field, context) {\n    if (x === undefined) {\n      throw new TypeError(field + \" is required in '\" + context + \"'.\");\n    }\n  } // https://heycam.github.io/webidl/#idl-unrestricted-double\n\n\n  function convertUnrestrictedDouble(value) {\n    return Number(value);\n  }\n\n  function censorNegativeZero(x) {\n    return x === 0 ? 0 : x;\n  }\n\n  function integerPart(x) {\n    return censorNegativeZero(MathTrunc(x));\n  } // https://heycam.github.io/webidl/#idl-unsigned-long-long\n\n\n  function convertUnsignedLongLongWithEnforceRange(value, context) {\n    var lowerBound = 0;\n    var upperBound = Number.MAX_SAFE_INTEGER;\n    var x = Number(value);\n    x = censorNegativeZero(x);\n\n    if (!NumberIsFinite(x)) {\n      throw new TypeError(context + \" is not a finite number\");\n    }\n\n    x = integerPart(x);\n\n    if (x < lowerBound || x > upperBound) {\n      throw new TypeError(context + \" is outside the accepted range of \" + lowerBound + \" to \" + upperBound + \", inclusive\");\n    }\n\n    if (!NumberIsFinite(x) || x === 0) {\n      return 0;\n    } // TODO Use BigInt if supported?\n    // let xBigInt = BigInt(integerPart(x));\n    // xBigInt = BigInt.asUintN(64, xBigInt);\n    // return Number(xBigInt);\n\n\n    return x;\n  }\n\n  function assertReadableStream(x, context) {\n    if (!IsReadableStream(x)) {\n      throw new TypeError(context + \" is not a ReadableStream.\");\n    }\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamDefaultReader(stream) {\n    return new ReadableStreamDefaultReader(stream);\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamAddReadRequest(stream, readRequest) {\n    stream._reader._readRequests.push(readRequest);\n  }\n\n  function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n    var reader = stream._reader;\n\n    var readRequest = reader._readRequests.shift();\n\n    if (done) {\n      readRequest._closeSteps();\n    } else {\n      readRequest._chunkSteps(chunk);\n    }\n  }\n\n  function ReadableStreamGetNumReadRequests(stream) {\n    return stream._reader._readRequests.length;\n  }\n\n  function ReadableStreamHasDefaultReader(stream) {\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return false;\n    }\n\n    if (!IsReadableStreamDefaultReader(reader)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * A default reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamDefaultReader =\n  /** @class */\n  function () {\n    function ReadableStreamDefaultReader(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n      assertReadableStream(stream, 'First parameter');\n\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readRequests = new SimpleQueue();\n    }\n\n    Object.defineProperty(ReadableStreamDefaultReader.prototype, \"closed\", {\n      /**\n       * Returns a promise that will be fulfilled when the stream becomes closed,\n       * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n       */\n      get: function () {\n        if (!IsReadableStreamDefaultReader(this)) {\n          return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n        }\n\n        return this._closedPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n\n    ReadableStreamDefaultReader.prototype.cancel = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n\n      return ReadableStreamReaderGenericCancel(this, reason);\n    };\n    /**\n     * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n\n\n    ReadableStreamDefaultReader.prototype.read = function () {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n\n      var resolvePromise;\n      var rejectPromise;\n      var promise = newPromise(function (resolve, reject) {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          return resolvePromise({\n            value: chunk,\n            done: false\n          });\n        },\n        _closeSteps: function () {\n          return resolvePromise({\n            value: undefined,\n            done: true\n          });\n        },\n        _errorSteps: function (e) {\n          return rejectPromise(e);\n        }\n      };\n      ReadableStreamDefaultReaderRead(this, readRequest);\n      return promise;\n    };\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n\n\n    ReadableStreamDefaultReader.prototype.releaseLock = function () {\n      if (!IsReadableStreamDefaultReader(this)) {\n        throw defaultReaderBrandCheckException('releaseLock');\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n\n      if (this._readRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n\n      ReadableStreamReaderGenericRelease(this);\n    };\n\n    return ReadableStreamDefaultReader;\n  }();\n\n  Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultReader',\n      configurable: true\n    });\n  } // Abstract operations for the readers.\n\n\n  function IsReadableStreamDefaultReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamDefaultReader;\n  }\n\n  function ReadableStreamDefaultReaderRead(reader, readRequest) {\n    var stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n\n    if (stream._state === 'closed') {\n      readRequest._closeSteps();\n    } else if (stream._state === 'errored') {\n      readRequest._errorSteps(stream._storedError);\n    } else {\n      stream._readableStreamController[PullSteps](readRequest);\n    }\n  } // Helper functions for the ReadableStreamDefaultReader.\n\n\n  function defaultReaderBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamDefaultReader.prototype.\" + name + \" can only be used on a ReadableStreamDefaultReader\");\n  } /// <reference lib=\"es2018.asynciterable\" />\n\n\n  var _a;\n\n  var AsyncIteratorPrototype;\n\n  if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n    // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n    // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n    AsyncIteratorPrototype = (_a = {}, // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    _a[SymbolPolyfill.asyncIterator] = function () {\n      return this;\n    }, _a);\n    Object.defineProperty(AsyncIteratorPrototype, SymbolPolyfill.asyncIterator, {\n      enumerable: false\n    });\n  } /// <reference lib=\"es2018.asynciterable\" />\n\n\n  var ReadableStreamAsyncIteratorImpl =\n  /** @class */\n  function () {\n    function ReadableStreamAsyncIteratorImpl(reader, preventCancel) {\n      this._ongoingPromise = undefined;\n      this._isFinished = false;\n      this._reader = reader;\n      this._preventCancel = preventCancel;\n    }\n\n    ReadableStreamAsyncIteratorImpl.prototype.next = function () {\n      var _this = this;\n\n      var nextSteps = function () {\n        return _this._nextSteps();\n      };\n\n      this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n      return this._ongoingPromise;\n    };\n\n    ReadableStreamAsyncIteratorImpl.prototype.return = function (value) {\n      var _this = this;\n\n      var returnSteps = function () {\n        return _this._returnSteps(value);\n      };\n\n      return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n    };\n\n    ReadableStreamAsyncIteratorImpl.prototype._nextSteps = function () {\n      var _this = this;\n\n      if (this._isFinished) {\n        return Promise.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n\n      var reader = this._reader;\n\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('iterate'));\n      }\n\n      var resolvePromise;\n      var rejectPromise;\n      var promise = newPromise(function (resolve, reject) {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          _this._ongoingPromise = undefined; // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n          // FIXME Is this a bug in the specification, or in the test?\n\n          queueMicrotask(function () {\n            return resolvePromise({\n              value: chunk,\n              done: false\n            });\n          });\n        },\n        _closeSteps: function () {\n          _this._ongoingPromise = undefined;\n          _this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          resolvePromise({\n            value: undefined,\n            done: true\n          });\n        },\n        _errorSteps: function (reason) {\n          _this._ongoingPromise = undefined;\n          _this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          rejectPromise(reason);\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promise;\n    };\n\n    ReadableStreamAsyncIteratorImpl.prototype._returnSteps = function (value) {\n      if (this._isFinished) {\n        return Promise.resolve({\n          value: value,\n          done: true\n        });\n      }\n\n      this._isFinished = true;\n      var reader = this._reader;\n\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('finish iterating'));\n      }\n\n      if (!this._preventCancel) {\n        var result = ReadableStreamReaderGenericCancel(reader, value);\n        ReadableStreamReaderGenericRelease(reader);\n        return transformPromiseWith(result, function () {\n          return {\n            value: value,\n            done: true\n          };\n        });\n      }\n\n      ReadableStreamReaderGenericRelease(reader);\n      return promiseResolvedWith({\n        value: value,\n        done: true\n      });\n    };\n\n    return ReadableStreamAsyncIteratorImpl;\n  }();\n\n  var ReadableStreamAsyncIteratorPrototype = {\n    next: function () {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n      }\n\n      return this._asyncIteratorImpl.next();\n    },\n    return: function (value) {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n      }\n\n      return this._asyncIteratorImpl.return(value);\n    }\n  };\n\n  if (AsyncIteratorPrototype !== undefined) {\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n    iterator._asyncIteratorImpl = impl;\n    return iterator;\n  }\n\n  function IsReadableStreamAsyncIterator(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n      return false;\n    }\n\n    try {\n      // noinspection SuspiciousTypeOfGuard\n      return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n    } catch (_a) {\n      return false;\n    }\n  } // Helper functions for the ReadableStream.\n\n\n  function streamAsyncIteratorBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamAsyncIterator.\" + name + \" can only be used on a ReadableSteamAsyncIterator\");\n  } /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n\n\n  var NumberIsNaN = Number.isNaN || function (x) {\n    // eslint-disable-next-line no-self-compare\n    return x !== x;\n  };\n\n  function CreateArrayFromList(elements) {\n    // We use arrays to represent lists, so this is basically a no-op.\n    // Do a slice though just in case we happen to depend on the unique-ness.\n    return elements.slice();\n  }\n\n  function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n    new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n  } // Not implemented correctly\n\n\n  function TransferArrayBuffer(O) {\n    return O;\n  } // Not implemented correctly\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  function IsDetachedBuffer(O) {\n    return false;\n  }\n\n  function ArrayBufferSlice(buffer, begin, end) {\n    // ArrayBuffer.prototype.slice is not available on IE10\n    // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n    if (buffer.slice) {\n      return buffer.slice(begin, end);\n    }\n\n    var length = end - begin;\n    var slice = new ArrayBuffer(length);\n    CopyDataBlockBytes(slice, 0, buffer, begin, length);\n    return slice;\n  }\n\n  function IsNonNegativeNumber(v) {\n    if (typeof v !== 'number') {\n      return false;\n    }\n\n    if (NumberIsNaN(v)) {\n      return false;\n    }\n\n    if (v < 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function CloneAsUint8Array(O) {\n    var buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n    return new Uint8Array(buffer);\n  }\n\n  function DequeueValue(container) {\n    var pair = container._queue.shift();\n\n    container._queueTotalSize -= pair.size;\n\n    if (container._queueTotalSize < 0) {\n      container._queueTotalSize = 0;\n    }\n\n    return pair.value;\n  }\n\n  function EnqueueValueWithSize(container, value, size) {\n    if (!IsNonNegativeNumber(size) || size === Infinity) {\n      throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n    }\n\n    container._queue.push({\n      value: value,\n      size: size\n    });\n\n    container._queueTotalSize += size;\n  }\n\n  function PeekQueueValue(container) {\n    var pair = container._queue.peek();\n\n    return pair.value;\n  }\n\n  function ResetQueue(container) {\n    container._queue = new SimpleQueue();\n    container._queueTotalSize = 0;\n  }\n  /**\n   * A pull-into request in a {@link ReadableByteStreamController}.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamBYOBRequest =\n  /** @class */\n  function () {\n    function ReadableStreamBYOBRequest() {\n      throw new TypeError('Illegal constructor');\n    }\n\n    Object.defineProperty(ReadableStreamBYOBRequest.prototype, \"view\", {\n      /**\n       * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n       */\n      get: function () {\n        if (!IsReadableStreamBYOBRequest(this)) {\n          throw byobRequestBrandCheckException('view');\n        }\n\n        return this._view;\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    ReadableStreamBYOBRequest.prototype.respond = function (bytesWritten) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respond');\n      }\n\n      assertRequiredArgument(bytesWritten, 1, 'respond');\n      bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n\n      if (IsDetachedBuffer(this._view.buffer)) ;\n      ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n    };\n\n    ReadableStreamBYOBRequest.prototype.respondWithNewView = function (view) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respondWithNewView');\n      }\n\n      assertRequiredArgument(view, 1, 'respondWithNewView');\n\n      if (!ArrayBuffer.isView(view)) {\n        throw new TypeError('You can only respond with array buffer views');\n      }\n\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n\n      if (IsDetachedBuffer(view.buffer)) ;\n      ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n    };\n\n    return ReadableStreamBYOBRequest;\n  }();\n\n  Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n    respond: {\n      enumerable: true\n    },\n    respondWithNewView: {\n      enumerable: true\n    },\n    view: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBRequest',\n      configurable: true\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n\n  var ReadableByteStreamController =\n  /** @class */\n  function () {\n    function ReadableByteStreamController() {\n      throw new TypeError('Illegal constructor');\n    }\n\n    Object.defineProperty(ReadableByteStreamController.prototype, \"byobRequest\", {\n      /**\n       * Returns the current BYOB pull request, or `null` if there isn't one.\n       */\n      get: function () {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('byobRequest');\n        }\n\n        return ReadableByteStreamControllerGetBYOBRequest(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(ReadableByteStreamController.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n       * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n       */\n      get: function () {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('desiredSize');\n        }\n\n        return ReadableByteStreamControllerGetDesiredSize(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n\n    ReadableByteStreamController.prototype.close = function () {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('close');\n      }\n\n      if (this._closeRequested) {\n        throw new TypeError('The stream has already been closed; do not close it again!');\n      }\n\n      var state = this._controlledReadableByteStream._state;\n\n      if (state !== 'readable') {\n        throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be closed\");\n      }\n\n      ReadableByteStreamControllerClose(this);\n    };\n\n    ReadableByteStreamController.prototype.enqueue = function (chunk) {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('enqueue');\n      }\n\n      assertRequiredArgument(chunk, 1, 'enqueue');\n\n      if (!ArrayBuffer.isView(chunk)) {\n        throw new TypeError('chunk must be an array buffer view');\n      }\n\n      if (chunk.byteLength === 0) {\n        throw new TypeError('chunk must have non-zero byteLength');\n      }\n\n      if (chunk.buffer.byteLength === 0) {\n        throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n      }\n\n      if (this._closeRequested) {\n        throw new TypeError('stream is closed or draining');\n      }\n\n      var state = this._controlledReadableByteStream._state;\n\n      if (state !== 'readable') {\n        throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be enqueued to\");\n      }\n\n      ReadableByteStreamControllerEnqueue(this, chunk);\n    };\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n\n\n    ReadableByteStreamController.prototype.error = function (e) {\n      if (e === void 0) {\n        e = undefined;\n      }\n\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('error');\n      }\n\n      ReadableByteStreamControllerError(this, e);\n    };\n    /** @internal */\n\n\n    ReadableByteStreamController.prototype[CancelSteps] = function (reason) {\n      ReadableByteStreamControllerClearPendingPullIntos(this);\n      ResetQueue(this);\n\n      var result = this._cancelAlgorithm(reason);\n\n      ReadableByteStreamControllerClearAlgorithms(this);\n      return result;\n    };\n    /** @internal */\n\n\n    ReadableByteStreamController.prototype[PullSteps] = function (readRequest) {\n      var stream = this._controlledReadableByteStream;\n\n      if (this._queueTotalSize > 0) {\n        var entry = this._queue.shift();\n\n        this._queueTotalSize -= entry.byteLength;\n        ReadableByteStreamControllerHandleQueueDrain(this);\n        var view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n        readRequest._chunkSteps(view);\n\n        return;\n      }\n\n      var autoAllocateChunkSize = this._autoAllocateChunkSize;\n\n      if (autoAllocateChunkSize !== undefined) {\n        var buffer = void 0;\n\n        try {\n          buffer = new ArrayBuffer(autoAllocateChunkSize);\n        } catch (bufferE) {\n          readRequest._errorSteps(bufferE);\n\n          return;\n        }\n\n        var pullIntoDescriptor = {\n          buffer: buffer,\n          bufferByteLength: autoAllocateChunkSize,\n          byteOffset: 0,\n          byteLength: autoAllocateChunkSize,\n          bytesFilled: 0,\n          elementSize: 1,\n          viewConstructor: Uint8Array,\n          readerType: 'default'\n        };\n\n        this._pendingPullIntos.push(pullIntoDescriptor);\n      }\n\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableByteStreamControllerCallPullIfNeeded(this);\n    };\n\n    return ReadableByteStreamController;\n  }();\n\n  Object.defineProperties(ReadableByteStreamController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    byobRequest: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableByteStreamController',\n      configurable: true\n    });\n  } // Abstract operations for the ReadableByteStreamController.\n\n\n  function IsReadableByteStreamController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n      return false;\n    }\n\n    return x instanceof ReadableByteStreamController;\n  }\n\n  function IsReadableStreamBYOBRequest(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamBYOBRequest;\n  }\n\n  function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n    var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n\n    if (!shouldPull) {\n      return;\n    }\n\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n\n    controller._pulling = true; // TODO: Test controller argument\n\n    var pullPromise = controller._pullAlgorithm();\n\n    uponPromise(pullPromise, function () {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    }, function (e) {\n      ReadableByteStreamControllerError(controller, e);\n    });\n  }\n\n  function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    controller._pendingPullIntos = new SimpleQueue();\n  }\n\n  function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n    var done = false;\n\n    if (stream._state === 'closed') {\n      done = true;\n    }\n\n    var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\n    if (pullIntoDescriptor.readerType === 'default') {\n      ReadableStreamFulfillReadRequest(stream, filledView, done);\n    } else {\n      ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n    }\n  }\n\n  function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n    var bytesFilled = pullIntoDescriptor.bytesFilled;\n    var elementSize = pullIntoDescriptor.elementSize;\n    return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n  }\n\n  function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n    controller._queue.push({\n      buffer: buffer,\n      byteOffset: byteOffset,\n      byteLength: byteLength\n    });\n\n    controller._queueTotalSize += byteLength;\n  }\n\n  function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n    var elementSize = pullIntoDescriptor.elementSize;\n    var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n    var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n    var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n    var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n    var totalBytesToCopyRemaining = maxBytesToCopy;\n    var ready = false;\n\n    if (maxAlignedBytes > currentAlignedBytes) {\n      totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n      ready = true;\n    }\n\n    var queue = controller._queue;\n\n    while (totalBytesToCopyRemaining > 0) {\n      var headOfQueue = queue.peek();\n      var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n      var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n      if (headOfQueue.byteLength === bytesToCopy) {\n        queue.shift();\n      } else {\n        headOfQueue.byteOffset += bytesToCopy;\n        headOfQueue.byteLength -= bytesToCopy;\n      }\n\n      controller._queueTotalSize -= bytesToCopy;\n      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n      totalBytesToCopyRemaining -= bytesToCopy;\n    }\n\n    return ready;\n  }\n\n  function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n    pullIntoDescriptor.bytesFilled += size;\n  }\n\n  function ReadableByteStreamControllerHandleQueueDrain(controller) {\n    if (controller._queueTotalSize === 0 && controller._closeRequested) {\n      ReadableByteStreamControllerClearAlgorithms(controller);\n      ReadableStreamClose(controller._controlledReadableByteStream);\n    } else {\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n  }\n\n  function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n    if (controller._byobRequest === null) {\n      return;\n    }\n\n    controller._byobRequest._associatedReadableByteStreamController = undefined;\n    controller._byobRequest._view = null;\n    controller._byobRequest = null;\n  }\n\n  function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n    while (controller._pendingPullIntos.length > 0) {\n      if (controller._queueTotalSize === 0) {\n        return;\n      }\n\n      var pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n      }\n    }\n  }\n\n  function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n    var stream = controller._controlledReadableByteStream;\n    var elementSize = 1;\n\n    if (view.constructor !== DataView) {\n      elementSize = view.constructor.BYTES_PER_ELEMENT;\n    }\n\n    var ctor = view.constructor; // try {\n\n    var buffer = TransferArrayBuffer(view.buffer); // } catch (e) {\n    //   readIntoRequest._errorSteps(e);\n    //   return;\n    // }\n\n    var pullIntoDescriptor = {\n      buffer: buffer,\n      bufferByteLength: buffer.byteLength,\n      byteOffset: view.byteOffset,\n      byteLength: view.byteLength,\n      bytesFilled: 0,\n      elementSize: elementSize,\n      viewConstructor: ctor,\n      readerType: 'byob'\n    };\n\n    if (controller._pendingPullIntos.length > 0) {\n      controller._pendingPullIntos.push(pullIntoDescriptor); // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n      // - No change happens on desiredSize\n      // - The source has already been notified of that there's at least 1 pending read(view)\n\n\n      ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n      return;\n    }\n\n    if (stream._state === 'closed') {\n      var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n\n      readIntoRequest._closeSteps(emptyView);\n\n      return;\n    }\n\n    if (controller._queueTotalSize > 0) {\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        ReadableByteStreamControllerHandleQueueDrain(controller);\n\n        readIntoRequest._chunkSteps(filledView);\n\n        return;\n      }\n\n      if (controller._closeRequested) {\n        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n\n        readIntoRequest._errorSteps(e);\n\n        return;\n      }\n    }\n\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (ReadableStreamHasBYOBReader(stream)) {\n      while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n        var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n      }\n    }\n  }\n\n  function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n    if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n      return;\n    }\n\n    ReadableByteStreamControllerShiftPendingPullInto(controller);\n    var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n\n    if (remainderSize > 0) {\n      var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      var remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n    }\n\n    pullIntoDescriptor.bytesFilled -= remainderSize;\n    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  }\n\n  function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      ReadableByteStreamControllerRespondInClosedState(controller);\n    } else {\n      ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n    }\n\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n    var descriptor = controller._pendingPullIntos.shift();\n\n    return descriptor;\n  }\n\n  function ReadableByteStreamControllerShouldCallPull(controller) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (stream._state !== 'readable') {\n      return false;\n    }\n\n    if (controller._closeRequested) {\n      return false;\n    }\n\n    if (!controller._started) {\n      return false;\n    }\n\n    if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n\n    if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      return true;\n    }\n\n    var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n\n    if (desiredSize > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function ReadableByteStreamControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n  } // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\n\n  function ReadableByteStreamControllerClose(controller) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n\n    if (controller._queueTotalSize > 0) {\n      controller._closeRequested = true;\n      return;\n    }\n\n    if (controller._pendingPullIntos.length > 0) {\n      var firstPendingPullInto = controller._pendingPullIntos.peek();\n\n      if (firstPendingPullInto.bytesFilled > 0) {\n        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n        throw e;\n      }\n    }\n\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n\n  function ReadableByteStreamControllerEnqueue(controller, chunk) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n\n    var buffer = chunk.buffer;\n    var byteOffset = chunk.byteOffset;\n    var byteLength = chunk.byteLength;\n    var transferredBuffer = TransferArrayBuffer(buffer);\n\n    if (controller._pendingPullIntos.length > 0) {\n      var firstPendingPullInto = controller._pendingPullIntos.peek();\n\n      if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n      firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n    }\n\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n    if (ReadableStreamHasDefaultReader(stream)) {\n      if (ReadableStreamGetNumReadRequests(stream) === 0) {\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      } else {\n        if (controller._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerShiftPendingPullInto(controller);\n        }\n\n        var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n      }\n    } else if (ReadableStreamHasBYOBReader(stream)) {\n      // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    } else {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    }\n\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerError(controller, e) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (stream._state !== 'readable') {\n      return;\n    }\n\n    ReadableByteStreamControllerClearPendingPullIntos(controller);\n    ResetQueue(controller);\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n\n  function ReadableByteStreamControllerGetBYOBRequest(controller) {\n    if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n      var firstDescriptor = controller._pendingPullIntos.peek();\n\n      var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n      var byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n      controller._byobRequest = byobRequest;\n    }\n\n    return controller._byobRequest;\n  }\n\n  function ReadableByteStreamControllerGetDesiredSize(controller) {\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'errored') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n\n  function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      if (bytesWritten !== 0) {\n        throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n      }\n    } else {\n      if (bytesWritten === 0) {\n        throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n      }\n\n      if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n        throw new RangeError('bytesWritten out of range');\n      }\n    }\n\n    firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n  }\n\n  function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      if (view.byteLength !== 0) {\n        throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n      }\n    } else {\n      if (view.byteLength === 0) {\n        throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n      }\n    }\n\n    if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n      throw new RangeError('The region specified by view does not match byobRequest');\n    }\n\n    if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n      throw new RangeError('The buffer of view has different capacity than byobRequest');\n    }\n\n    if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n      throw new RangeError('The region specified by view is larger than byobRequest');\n    }\n\n    var viewByteLength = view.byteLength;\n    firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n  }\n\n  function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n    controller._controlledReadableByteStream = stream;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._byobRequest = null; // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\n    controller._queue = controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._closeRequested = false;\n    controller._started = false;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    controller._autoAllocateChunkSize = autoAllocateChunkSize;\n    controller._pendingPullIntos = new SimpleQueue();\n    stream._readableStreamController = controller;\n    var startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), function () {\n      controller._started = true;\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }, function (r) {\n      ReadableByteStreamControllerError(controller, r);\n    });\n  }\n\n  function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n    var controller = Object.create(ReadableByteStreamController.prototype);\n\n    var startAlgorithm = function () {\n      return undefined;\n    };\n\n    var pullAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    var cancelAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (underlyingByteSource.start !== undefined) {\n      startAlgorithm = function () {\n        return underlyingByteSource.start(controller);\n      };\n    }\n\n    if (underlyingByteSource.pull !== undefined) {\n      pullAlgorithm = function () {\n        return underlyingByteSource.pull(controller);\n      };\n    }\n\n    if (underlyingByteSource.cancel !== undefined) {\n      cancelAlgorithm = function (reason) {\n        return underlyingByteSource.cancel(reason);\n      };\n    }\n\n    var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n\n    if (autoAllocateChunkSize === 0) {\n      throw new TypeError('autoAllocateChunkSize must be greater than 0');\n    }\n\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n  }\n\n  function SetUpReadableStreamBYOBRequest(request, controller, view) {\n    request._associatedReadableByteStreamController = controller;\n    request._view = view;\n  } // Helper functions for the ReadableStreamBYOBRequest.\n\n\n  function byobRequestBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamBYOBRequest.prototype.\" + name + \" can only be used on a ReadableStreamBYOBRequest\");\n  } // Helper functions for the ReadableByteStreamController.\n\n\n  function byteStreamControllerBrandCheckException(name) {\n    return new TypeError(\"ReadableByteStreamController.prototype.\" + name + \" can only be used on a ReadableByteStreamController\");\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamBYOBReader(stream) {\n    return new ReadableStreamBYOBReader(stream);\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  }\n\n  function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n    var reader = stream._reader;\n\n    var readIntoRequest = reader._readIntoRequests.shift();\n\n    if (done) {\n      readIntoRequest._closeSteps(chunk);\n    } else {\n      readIntoRequest._chunkSteps(chunk);\n    }\n  }\n\n  function ReadableStreamGetNumReadIntoRequests(stream) {\n    return stream._reader._readIntoRequests.length;\n  }\n\n  function ReadableStreamHasBYOBReader(stream) {\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return false;\n    }\n\n    if (!IsReadableStreamBYOBReader(reader)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * A BYOB reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamBYOBReader =\n  /** @class */\n  function () {\n    function ReadableStreamBYOBReader(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n      assertReadableStream(stream, 'First parameter');\n\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n\n      if (!IsReadableByteStreamController(stream._readableStreamController)) {\n        throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' + 'source');\n      }\n\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readIntoRequests = new SimpleQueue();\n    }\n\n    Object.defineProperty(ReadableStreamBYOBReader.prototype, \"closed\", {\n      /**\n       * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n       * the reader's lock is released before the stream finishes closing.\n       */\n      get: function () {\n        if (!IsReadableStreamBYOBReader(this)) {\n          return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n        }\n\n        return this._closedPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n\n    ReadableStreamBYOBReader.prototype.cancel = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n\n      return ReadableStreamReaderGenericCancel(this, reason);\n    };\n    /**\n     * Attempts to reads bytes into view, and returns a promise resolved with the result.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n\n\n    ReadableStreamBYOBReader.prototype.read = function (view) {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('read'));\n      }\n\n      if (!ArrayBuffer.isView(view)) {\n        return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n      }\n\n      if (view.byteLength === 0) {\n        return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n      }\n\n      if (view.buffer.byteLength === 0) {\n        return promiseRejectedWith(new TypeError(\"view's buffer must have non-zero byteLength\"));\n      }\n\n      if (IsDetachedBuffer(view.buffer)) ;\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n\n      var resolvePromise;\n      var rejectPromise;\n      var promise = newPromise(function (resolve, reject) {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      var readIntoRequest = {\n        _chunkSteps: function (chunk) {\n          return resolvePromise({\n            value: chunk,\n            done: false\n          });\n        },\n        _closeSteps: function (chunk) {\n          return resolvePromise({\n            value: chunk,\n            done: true\n          });\n        },\n        _errorSteps: function (e) {\n          return rejectPromise(e);\n        }\n      };\n      ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n      return promise;\n    };\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n\n\n    ReadableStreamBYOBReader.prototype.releaseLock = function () {\n      if (!IsReadableStreamBYOBReader(this)) {\n        throw byobReaderBrandCheckException('releaseLock');\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n\n      if (this._readIntoRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n\n      ReadableStreamReaderGenericRelease(this);\n    };\n\n    return ReadableStreamBYOBReader;\n  }();\n\n  Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBReader',\n      configurable: true\n    });\n  } // Abstract operations for the readers.\n\n\n  function IsReadableStreamBYOBReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamBYOBReader;\n  }\n\n  function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n    var stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n\n    if (stream._state === 'errored') {\n      readIntoRequest._errorSteps(stream._storedError);\n    } else {\n      ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n    }\n  } // Helper functions for the ReadableStreamBYOBReader.\n\n\n  function byobReaderBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamBYOBReader.prototype.\" + name + \" can only be used on a ReadableStreamBYOBReader\");\n  }\n\n  function ExtractHighWaterMark(strategy, defaultHWM) {\n    var highWaterMark = strategy.highWaterMark;\n\n    if (highWaterMark === undefined) {\n      return defaultHWM;\n    }\n\n    if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n      throw new RangeError('Invalid highWaterMark');\n    }\n\n    return highWaterMark;\n  }\n\n  function ExtractSizeAlgorithm(strategy) {\n    var size = strategy.size;\n\n    if (!size) {\n      return function () {\n        return 1;\n      };\n    }\n\n    return size;\n  }\n\n  function convertQueuingStrategy(init, context) {\n    assertDictionary(init, context);\n    var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    var size = init === null || init === void 0 ? void 0 : init.size;\n    return {\n      highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n      size: size === undefined ? undefined : convertQueuingStrategySize(size, context + \" has member 'size' that\")\n    };\n  }\n\n  function convertQueuingStrategySize(fn, context) {\n    assertFunction(fn, context);\n    return function (chunk) {\n      return convertUnrestrictedDouble(fn(chunk));\n    };\n  }\n\n  function convertUnderlyingSink(original, context) {\n    assertDictionary(original, context);\n    var abort = original === null || original === void 0 ? void 0 : original.abort;\n    var close = original === null || original === void 0 ? void 0 : original.close;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var type = original === null || original === void 0 ? void 0 : original.type;\n    var write = original === null || original === void 0 ? void 0 : original.write;\n    return {\n      abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, context + \" has member 'abort' that\"),\n      close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, context + \" has member 'close' that\"),\n      start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, context + \" has member 'start' that\"),\n      write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, context + \" has member 'write' that\"),\n      type: type\n    };\n  }\n\n  function convertUnderlyingSinkAbortCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (reason) {\n      return promiseCall(fn, original, [reason]);\n    };\n  }\n\n  function convertUnderlyingSinkCloseCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function () {\n      return promiseCall(fn, original, []);\n    };\n  }\n\n  function convertUnderlyingSinkStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n\n  function convertUnderlyingSinkWriteCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (chunk, controller) {\n      return promiseCall(fn, original, [chunk, controller]);\n    };\n  }\n\n  function assertWritableStream(x, context) {\n    if (!IsWritableStream(x)) {\n      throw new TypeError(context + \" is not a WritableStream.\");\n    }\n  }\n\n  function isAbortSignal(value) {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n\n    try {\n      return typeof value.aborted === 'boolean';\n    } catch (_a) {\n      // AbortSignal.prototype.aborted throws if its brand check fails\n      return false;\n    }\n  }\n\n  var supportsAbortController = typeof AbortController === 'function';\n  /**\n   * Construct a new AbortController, if supported by the platform.\n   *\n   * @internal\n   */\n\n  function createAbortController() {\n    if (supportsAbortController) {\n      return new AbortController();\n    }\n\n    return undefined;\n  }\n  /**\n   * A writable stream represents a destination for data, into which you can write.\n   *\n   * @public\n   */\n\n\n  var WritableStream =\n  /** @class */\n  function () {\n    function WritableStream(rawUnderlyingSink, rawStrategy) {\n      if (rawUnderlyingSink === void 0) {\n        rawUnderlyingSink = {};\n      }\n\n      if (rawStrategy === void 0) {\n        rawStrategy = {};\n      }\n\n      if (rawUnderlyingSink === undefined) {\n        rawUnderlyingSink = null;\n      } else {\n        assertObject(rawUnderlyingSink, 'First parameter');\n      }\n\n      var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      var underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n      InitializeWritableStream(this);\n      var type = underlyingSink.type;\n\n      if (type !== undefined) {\n        throw new RangeError('Invalid type is specified');\n      }\n\n      var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      var highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n    }\n\n    Object.defineProperty(WritableStream.prototype, \"locked\", {\n      /**\n       * Returns whether or not the writable stream is locked to a writer.\n       */\n      get: function () {\n        if (!IsWritableStream(this)) {\n          throw streamBrandCheckException$2('locked');\n        }\n\n        return IsWritableStreamLocked(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n     * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n     * mechanism of the underlying sink.\n     *\n     * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n     * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n     * the stream) if the stream is currently locked.\n     */\n\n    WritableStream.prototype.abort = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('abort'));\n      }\n\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n      }\n\n      return WritableStreamAbort(this, reason);\n    };\n    /**\n     * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n     * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n     *\n     * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n     * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n     * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n     */\n\n\n    WritableStream.prototype.close = function () {\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('close'));\n      }\n\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n      }\n\n      if (WritableStreamCloseQueuedOrInFlight(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n\n      return WritableStreamClose(this);\n    };\n    /**\n     * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n     * is locked, no other writer can be acquired until this one is released.\n     *\n     * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n     * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n     * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n     */\n\n\n    WritableStream.prototype.getWriter = function () {\n      if (!IsWritableStream(this)) {\n        throw streamBrandCheckException$2('getWriter');\n      }\n\n      return AcquireWritableStreamDefaultWriter(this);\n    };\n\n    return WritableStream;\n  }();\n\n  Object.defineProperties(WritableStream.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    getWriter: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStream',\n      configurable: true\n    });\n  } // Abstract operations for the WritableStream.\n\n\n  function AcquireWritableStreamDefaultWriter(stream) {\n    return new WritableStreamDefaultWriter(stream);\n  } // Throws if and only if startAlgorithm throws.\n\n\n  function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n    if (highWaterMark === void 0) {\n      highWaterMark = 1;\n    }\n\n    if (sizeAlgorithm === void 0) {\n      sizeAlgorithm = function () {\n        return 1;\n      };\n    }\n\n    var stream = Object.create(WritableStream.prototype);\n    InitializeWritableStream(stream);\n    var controller = Object.create(WritableStreamDefaultController.prototype);\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  }\n\n  function InitializeWritableStream(stream) {\n    stream._state = 'writable'; // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n    // 'erroring' or 'errored'. May be set to an undefined value.\n\n    stream._storedError = undefined;\n    stream._writer = undefined; // Initialize to undefined first because the constructor of the controller checks this\n    // variable to validate the caller.\n\n    stream._writableStreamController = undefined; // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n    // producer without waiting for the queued writes to finish.\n\n    stream._writeRequests = new SimpleQueue(); // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n    // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n\n    stream._inFlightWriteRequest = undefined; // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n    // has been detached.\n\n    stream._closeRequest = undefined; // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n    // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n\n    stream._inFlightCloseRequest = undefined; // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n\n    stream._pendingAbortRequest = undefined; // The backpressure signal set by the controller.\n\n    stream._backpressure = false;\n  }\n\n  function IsWritableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n      return false;\n    }\n\n    return x instanceof WritableStream;\n  }\n\n  function IsWritableStreamLocked(stream) {\n    if (stream._writer === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamAbort(stream, reason) {\n    var _a;\n\n    if (stream._state === 'closed' || stream._state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n\n    stream._writableStreamController._abortReason = reason;\n    (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort(); // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n    // but it doesn't know that signaling abort runs author code that might have changed the state.\n    // Widen the type again by casting to WritableStreamState.\n\n    var state = stream._state;\n\n    if (state === 'closed' || state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (stream._pendingAbortRequest !== undefined) {\n      return stream._pendingAbortRequest._promise;\n    }\n\n    var wasAlreadyErroring = false;\n\n    if (state === 'erroring') {\n      wasAlreadyErroring = true; // reason will not be used, so don't keep a reference to it.\n\n      reason = undefined;\n    }\n\n    var promise = newPromise(function (resolve, reject) {\n      stream._pendingAbortRequest = {\n        _promise: undefined,\n        _resolve: resolve,\n        _reject: reject,\n        _reason: reason,\n        _wasAlreadyErroring: wasAlreadyErroring\n      };\n    });\n    stream._pendingAbortRequest._promise = promise;\n\n    if (!wasAlreadyErroring) {\n      WritableStreamStartErroring(stream, reason);\n    }\n\n    return promise;\n  }\n\n  function WritableStreamClose(stream) {\n    var state = stream._state;\n\n    if (state === 'closed' || state === 'errored') {\n      return promiseRejectedWith(new TypeError(\"The stream (in \" + state + \" state) is not in the writable state and cannot be closed\"));\n    }\n\n    var promise = newPromise(function (resolve, reject) {\n      var closeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n      stream._closeRequest = closeRequest;\n    });\n    var writer = stream._writer;\n\n    if (writer !== undefined && stream._backpressure && state === 'writable') {\n      defaultWriterReadyPromiseResolve(writer);\n    }\n\n    WritableStreamDefaultControllerClose(stream._writableStreamController);\n    return promise;\n  } // WritableStream API exposed for controllers.\n\n\n  function WritableStreamAddWriteRequest(stream) {\n    var promise = newPromise(function (resolve, reject) {\n      var writeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n\n      stream._writeRequests.push(writeRequest);\n    });\n    return promise;\n  }\n\n  function WritableStreamDealWithRejection(stream, error) {\n    var state = stream._state;\n\n    if (state === 'writable') {\n      WritableStreamStartErroring(stream, error);\n      return;\n    }\n\n    WritableStreamFinishErroring(stream);\n  }\n\n  function WritableStreamStartErroring(stream, reason) {\n    var controller = stream._writableStreamController;\n    stream._state = 'erroring';\n    stream._storedError = reason;\n    var writer = stream._writer;\n\n    if (writer !== undefined) {\n      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n    }\n\n    if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n      WritableStreamFinishErroring(stream);\n    }\n  }\n\n  function WritableStreamFinishErroring(stream) {\n    stream._state = 'errored';\n\n    stream._writableStreamController[ErrorSteps]();\n\n    var storedError = stream._storedError;\n\n    stream._writeRequests.forEach(function (writeRequest) {\n      writeRequest._reject(storedError);\n    });\n\n    stream._writeRequests = new SimpleQueue();\n\n    if (stream._pendingAbortRequest === undefined) {\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n\n    var abortRequest = stream._pendingAbortRequest;\n    stream._pendingAbortRequest = undefined;\n\n    if (abortRequest._wasAlreadyErroring) {\n      abortRequest._reject(storedError);\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n\n    var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n\n    uponPromise(promise, function () {\n      abortRequest._resolve();\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    }, function (reason) {\n      abortRequest._reject(reason);\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n  }\n\n  function WritableStreamFinishInFlightWrite(stream) {\n    stream._inFlightWriteRequest._resolve(undefined);\n\n    stream._inFlightWriteRequest = undefined;\n  }\n\n  function WritableStreamFinishInFlightWriteWithError(stream, error) {\n    stream._inFlightWriteRequest._reject(error);\n\n    stream._inFlightWriteRequest = undefined;\n    WritableStreamDealWithRejection(stream, error);\n  }\n\n  function WritableStreamFinishInFlightClose(stream) {\n    stream._inFlightCloseRequest._resolve(undefined);\n\n    stream._inFlightCloseRequest = undefined;\n    var state = stream._state;\n\n    if (state === 'erroring') {\n      // The error was too late to do anything, so it is ignored.\n      stream._storedError = undefined;\n\n      if (stream._pendingAbortRequest !== undefined) {\n        stream._pendingAbortRequest._resolve();\n\n        stream._pendingAbortRequest = undefined;\n      }\n    }\n\n    stream._state = 'closed';\n    var writer = stream._writer;\n\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseResolve(writer);\n    }\n  }\n\n  function WritableStreamFinishInFlightCloseWithError(stream, error) {\n    stream._inFlightCloseRequest._reject(error);\n\n    stream._inFlightCloseRequest = undefined; // Never execute sink abort() after sink close().\n\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._reject(error);\n\n      stream._pendingAbortRequest = undefined;\n    }\n\n    WritableStreamDealWithRejection(stream, error);\n  } // TODO(ricea): Fix alphabetical order.\n\n\n  function WritableStreamCloseQueuedOrInFlight(stream) {\n    if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamHasOperationMarkedInFlight(stream) {\n    if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamMarkCloseRequestInFlight(stream) {\n    stream._inFlightCloseRequest = stream._closeRequest;\n    stream._closeRequest = undefined;\n  }\n\n  function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n    stream._inFlightWriteRequest = stream._writeRequests.shift();\n  }\n\n  function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n    if (stream._closeRequest !== undefined) {\n      stream._closeRequest._reject(stream._storedError);\n\n      stream._closeRequest = undefined;\n    }\n\n    var writer = stream._writer;\n\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseReject(writer, stream._storedError);\n    }\n  }\n\n  function WritableStreamUpdateBackpressure(stream, backpressure) {\n    var writer = stream._writer;\n\n    if (writer !== undefined && backpressure !== stream._backpressure) {\n      if (backpressure) {\n        defaultWriterReadyPromiseReset(writer);\n      } else {\n        defaultWriterReadyPromiseResolve(writer);\n      }\n    }\n\n    stream._backpressure = backpressure;\n  }\n  /**\n   * A default writer vended by a {@link WritableStream}.\n   *\n   * @public\n   */\n\n\n  var WritableStreamDefaultWriter =\n  /** @class */\n  function () {\n    function WritableStreamDefaultWriter(stream) {\n      assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n      assertWritableStream(stream, 'First parameter');\n\n      if (IsWritableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n      }\n\n      this._ownerWritableStream = stream;\n      stream._writer = this;\n      var state = stream._state;\n\n      if (state === 'writable') {\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n          defaultWriterReadyPromiseInitialize(this);\n        } else {\n          defaultWriterReadyPromiseInitializeAsResolved(this);\n        }\n\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'erroring') {\n        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'closed') {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n        defaultWriterClosedPromiseInitializeAsResolved(this);\n      } else {\n        var storedError = stream._storedError;\n        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      }\n    }\n\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, \"closed\", {\n      /**\n       * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n       * the writer’s lock is released before the stream finishes closing.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n        }\n\n        return this._closedPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n       * A producer can use this information to determine the right amount of data to write.\n       *\n       * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n       * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n       * the writer’s lock is released.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          throw defaultWriterBrandCheckException('desiredSize');\n        }\n\n        if (this._ownerWritableStream === undefined) {\n          throw defaultWriterLockException('desiredSize');\n        }\n\n        return WritableStreamDefaultWriterGetDesiredSize(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, \"ready\", {\n      /**\n       * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n       * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n       * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n       *\n       * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n       * rejected.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n        }\n\n        return this._readyPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n     */\n\n    WritableStreamDefaultWriter.prototype.abort = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n      }\n\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('abort'));\n      }\n\n      return WritableStreamDefaultWriterAbort(this, reason);\n    };\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n     */\n\n\n    WritableStreamDefaultWriter.prototype.close = function () {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n      }\n\n      var stream = this._ownerWritableStream;\n\n      if (stream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('close'));\n      }\n\n      if (WritableStreamCloseQueuedOrInFlight(stream)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n\n      return WritableStreamDefaultWriterClose(this);\n    };\n    /**\n     * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n     * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n     * now on; otherwise, the writer will appear closed.\n     *\n     * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n     * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n     * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n     * other producers from writing in an interleaved manner.\n     */\n\n\n    WritableStreamDefaultWriter.prototype.releaseLock = function () {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        throw defaultWriterBrandCheckException('releaseLock');\n      }\n\n      var stream = this._ownerWritableStream;\n\n      if (stream === undefined) {\n        return;\n      }\n\n      WritableStreamDefaultWriterRelease(this);\n    };\n\n    WritableStreamDefaultWriter.prototype.write = function (chunk) {\n      if (chunk === void 0) {\n        chunk = undefined;\n      }\n\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n      }\n\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('write to'));\n      }\n\n      return WritableStreamDefaultWriterWrite(this, chunk);\n    };\n\n    return WritableStreamDefaultWriter;\n  }();\n\n  Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    write: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    },\n    ready: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultWriter',\n      configurable: true\n    });\n  } // Abstract operations for the WritableStreamDefaultWriter.\n\n\n  function IsWritableStreamDefaultWriter(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n      return false;\n    }\n\n    return x instanceof WritableStreamDefaultWriter;\n  } // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\n\n  function WritableStreamDefaultWriterAbort(writer, reason) {\n    var stream = writer._ownerWritableStream;\n    return WritableStreamAbort(stream, reason);\n  }\n\n  function WritableStreamDefaultWriterClose(writer) {\n    var stream = writer._ownerWritableStream;\n    return WritableStreamClose(stream);\n  }\n\n  function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n    var stream = writer._ownerWritableStream;\n    var state = stream._state;\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    return WritableStreamDefaultWriterClose(writer);\n  }\n\n  function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n    if (writer._closedPromiseState === 'pending') {\n      defaultWriterClosedPromiseReject(writer, error);\n    } else {\n      defaultWriterClosedPromiseResetToRejected(writer, error);\n    }\n  }\n\n  function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n    if (writer._readyPromiseState === 'pending') {\n      defaultWriterReadyPromiseReject(writer, error);\n    } else {\n      defaultWriterReadyPromiseResetToRejected(writer, error);\n    }\n  }\n\n  function WritableStreamDefaultWriterGetDesiredSize(writer) {\n    var stream = writer._ownerWritableStream;\n    var state = stream._state;\n\n    if (state === 'errored' || state === 'erroring') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n  }\n\n  function WritableStreamDefaultWriterRelease(writer) {\n    var stream = writer._ownerWritableStream;\n    var releasedError = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError); // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n    // rejected until afterwards. This means that simply testing state will not work.\n\n    WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n    stream._writer = undefined;\n    writer._ownerWritableStream = undefined;\n  }\n\n  function WritableStreamDefaultWriterWrite(writer, chunk) {\n    var stream = writer._ownerWritableStream;\n    var controller = stream._writableStreamController;\n    var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n    if (stream !== writer._ownerWritableStream) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    var state = stream._state;\n\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n    }\n\n    if (state === 'erroring') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    var promise = WritableStreamAddWriteRequest(stream);\n    WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n    return promise;\n  }\n\n  var closeSentinel = {};\n  /**\n   * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n  var WritableStreamDefaultController =\n  /** @class */\n  function () {\n    function WritableStreamDefaultController() {\n      throw new TypeError('Illegal constructor');\n    }\n\n    Object.defineProperty(WritableStreamDefaultController.prototype, \"abortReason\", {\n      /**\n       * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n       *\n       * @deprecated\n       *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n       *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$2('abortReason');\n        }\n\n        return this._abortReason;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(WritableStreamDefaultController.prototype, \"signal\", {\n      /**\n       * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$2('signal');\n        }\n\n        if (this._abortController === undefined) {\n          // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n          // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n          // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n          throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n        }\n\n        return this._abortController.signal;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n     *\n     * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n     * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n     * normal lifecycle of interactions with the underlying sink.\n     */\n\n    WritableStreamDefaultController.prototype.error = function (e) {\n      if (e === void 0) {\n        e = undefined;\n      }\n\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('error');\n      }\n\n      var state = this._controlledWritableStream._state;\n\n      if (state !== 'writable') {\n        // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n        // just treat it as a no-op.\n        return;\n      }\n\n      WritableStreamDefaultControllerError(this, e);\n    };\n    /** @internal */\n\n\n    WritableStreamDefaultController.prototype[AbortSteps] = function (reason) {\n      var result = this._abortAlgorithm(reason);\n\n      WritableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    };\n    /** @internal */\n\n\n    WritableStreamDefaultController.prototype[ErrorSteps] = function () {\n      ResetQueue(this);\n    };\n\n    return WritableStreamDefaultController;\n  }();\n\n  Object.defineProperties(WritableStreamDefaultController.prototype, {\n    abortReason: {\n      enumerable: true\n    },\n    signal: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultController',\n      configurable: true\n    });\n  } // Abstract operations implementing interface required by the WritableStream.\n\n\n  function IsWritableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n      return false;\n    }\n\n    return x instanceof WritableStreamDefaultController;\n  }\n\n  function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledWritableStream = stream;\n    stream._writableStreamController = controller; // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._abortReason = undefined;\n    controller._abortController = createAbortController();\n    controller._started = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._writeAlgorithm = writeAlgorithm;\n    controller._closeAlgorithm = closeAlgorithm;\n    controller._abortAlgorithm = abortAlgorithm;\n    var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n    var startResult = startAlgorithm();\n    var startPromise = promiseResolvedWith(startResult);\n    uponPromise(startPromise, function () {\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, function (r) {\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    });\n  }\n\n  function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n    var controller = Object.create(WritableStreamDefaultController.prototype);\n\n    var startAlgorithm = function () {\n      return undefined;\n    };\n\n    var writeAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    var closeAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    var abortAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (underlyingSink.start !== undefined) {\n      startAlgorithm = function () {\n        return underlyingSink.start(controller);\n      };\n    }\n\n    if (underlyingSink.write !== undefined) {\n      writeAlgorithm = function (chunk) {\n        return underlyingSink.write(chunk, controller);\n      };\n    }\n\n    if (underlyingSink.close !== undefined) {\n      closeAlgorithm = function () {\n        return underlyingSink.close();\n      };\n    }\n\n    if (underlyingSink.abort !== undefined) {\n      abortAlgorithm = function (reason) {\n        return underlyingSink.abort(reason);\n      };\n    }\n\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n  } // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n\n\n  function WritableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._writeAlgorithm = undefined;\n    controller._closeAlgorithm = undefined;\n    controller._abortAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  }\n\n  function WritableStreamDefaultControllerClose(controller) {\n    EnqueueValueWithSize(controller, closeSentinel, 0);\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }\n\n  function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n    try {\n      return controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n      return 1;\n    }\n  }\n\n  function WritableStreamDefaultControllerGetDesiredSize(controller) {\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n\n  function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n      return;\n    }\n\n    var stream = controller._controlledWritableStream;\n\n    if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n      var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n      WritableStreamUpdateBackpressure(stream, backpressure);\n    }\n\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  } // Abstract operations for the WritableStreamDefaultController.\n\n\n  function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n    var stream = controller._controlledWritableStream;\n\n    if (!controller._started) {\n      return;\n    }\n\n    if (stream._inFlightWriteRequest !== undefined) {\n      return;\n    }\n\n    var state = stream._state;\n\n    if (state === 'erroring') {\n      WritableStreamFinishErroring(stream);\n      return;\n    }\n\n    if (controller._queue.length === 0) {\n      return;\n    }\n\n    var value = PeekQueueValue(controller);\n\n    if (value === closeSentinel) {\n      WritableStreamDefaultControllerProcessClose(controller);\n    } else {\n      WritableStreamDefaultControllerProcessWrite(controller, value);\n    }\n  }\n\n  function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n    if (controller._controlledWritableStream._state === 'writable') {\n      WritableStreamDefaultControllerError(controller, error);\n    }\n  }\n\n  function WritableStreamDefaultControllerProcessClose(controller) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamMarkCloseRequestInFlight(stream);\n    DequeueValue(controller);\n\n    var sinkClosePromise = controller._closeAlgorithm();\n\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    uponPromise(sinkClosePromise, function () {\n      WritableStreamFinishInFlightClose(stream);\n    }, function (reason) {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    });\n  }\n\n  function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n    var sinkWritePromise = controller._writeAlgorithm(chunk);\n\n    uponPromise(sinkWritePromise, function () {\n      WritableStreamFinishInFlightWrite(stream);\n      var state = stream._state;\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, function (reason) {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    });\n  }\n\n  function WritableStreamDefaultControllerGetBackpressure(controller) {\n    var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n    return desiredSize <= 0;\n  } // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\n\n  function WritableStreamDefaultControllerError(controller, error) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    WritableStreamStartErroring(stream, error);\n  } // Helper functions for the WritableStream.\n\n\n  function streamBrandCheckException$2(name) {\n    return new TypeError(\"WritableStream.prototype.\" + name + \" can only be used on a WritableStream\");\n  } // Helper functions for the WritableStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException$2(name) {\n    return new TypeError(\"WritableStreamDefaultController.prototype.\" + name + \" can only be used on a WritableStreamDefaultController\");\n  } // Helper functions for the WritableStreamDefaultWriter.\n\n\n  function defaultWriterBrandCheckException(name) {\n    return new TypeError(\"WritableStreamDefaultWriter.prototype.\" + name + \" can only be used on a WritableStreamDefaultWriter\");\n  }\n\n  function defaultWriterLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released writer');\n  }\n\n  function defaultWriterClosedPromiseInitialize(writer) {\n    writer._closedPromise = newPromise(function (resolve, reject) {\n      writer._closedPromise_resolve = resolve;\n      writer._closedPromise_reject = reject;\n      writer._closedPromiseState = 'pending';\n    });\n  }\n\n  function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseReject(writer, reason);\n  }\n\n  function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  function defaultWriterClosedPromiseReject(writer, reason) {\n    if (writer._closedPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(writer._closedPromise);\n\n    writer._closedPromise_reject(reason);\n\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'rejected';\n  }\n\n  function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n    defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n  }\n\n  function defaultWriterClosedPromiseResolve(writer) {\n    if (writer._closedPromise_resolve === undefined) {\n      return;\n    }\n\n    writer._closedPromise_resolve(undefined);\n\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'resolved';\n  }\n\n  function defaultWriterReadyPromiseInitialize(writer) {\n    writer._readyPromise = newPromise(function (resolve, reject) {\n      writer._readyPromise_resolve = resolve;\n      writer._readyPromise_reject = reject;\n    });\n    writer._readyPromiseState = 'pending';\n  }\n\n  function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseReject(writer, reason);\n  }\n\n  function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  function defaultWriterReadyPromiseReject(writer, reason) {\n    if (writer._readyPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(writer._readyPromise);\n\n    writer._readyPromise_reject(reason);\n\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'rejected';\n  }\n\n  function defaultWriterReadyPromiseReset(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n  }\n\n  function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n    defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n  }\n\n  function defaultWriterReadyPromiseResolve(writer) {\n    if (writer._readyPromise_resolve === undefined) {\n      return;\n    }\n\n    writer._readyPromise_resolve(undefined);\n\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'fulfilled';\n  } /// <reference lib=\"dom\" />\n\n\n  var NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined; /// <reference types=\"node\" />\n\n  function isDOMExceptionConstructor(ctor) {\n    if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n      return false;\n    }\n\n    try {\n      new ctor();\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  function createDOMExceptionPolyfill() {\n    // eslint-disable-next-line no-shadow\n    var ctor = function DOMException(message, name) {\n      this.message = message || '';\n      this.name = name || 'Error';\n\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n    };\n\n    ctor.prototype = Object.create(Error.prototype);\n    Object.defineProperty(ctor.prototype, 'constructor', {\n      value: ctor,\n      writable: true,\n      configurable: true\n    });\n    return ctor;\n  } // eslint-disable-next-line no-redeclare\n\n\n  var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\n  function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n    var reader = AcquireReadableStreamDefaultReader(source);\n    var writer = AcquireWritableStreamDefaultWriter(dest);\n    source._disturbed = true;\n    var shuttingDown = false; // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n\n    var currentWrite = promiseResolvedWith(undefined);\n    return newPromise(function (resolve, reject) {\n      var abortAlgorithm;\n\n      if (signal !== undefined) {\n        abortAlgorithm = function () {\n          var error = new DOMException$1('Aborted', 'AbortError');\n          var actions = [];\n\n          if (!preventAbort) {\n            actions.push(function () {\n              if (dest._state === 'writable') {\n                return WritableStreamAbort(dest, error);\n              }\n\n              return promiseResolvedWith(undefined);\n            });\n          }\n\n          if (!preventCancel) {\n            actions.push(function () {\n              if (source._state === 'readable') {\n                return ReadableStreamCancel(source, error);\n              }\n\n              return promiseResolvedWith(undefined);\n            });\n          }\n\n          shutdownWithAction(function () {\n            return Promise.all(actions.map(function (action) {\n              return action();\n            }));\n          }, true, error);\n        };\n\n        if (signal.aborted) {\n          abortAlgorithm();\n          return;\n        }\n\n        signal.addEventListener('abort', abortAlgorithm);\n      } // Using reader and writer, read all chunks from this and write them to dest\n      // - Backpressure must be enforced\n      // - Shutdown must stop all activity\n\n\n      function pipeLoop() {\n        return newPromise(function (resolveLoop, rejectLoop) {\n          function next(done) {\n            if (done) {\n              resolveLoop();\n            } else {\n              // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n              // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n              PerformPromiseThen(pipeStep(), next, rejectLoop);\n            }\n          }\n\n          next(false);\n        });\n      }\n\n      function pipeStep() {\n        if (shuttingDown) {\n          return promiseResolvedWith(true);\n        }\n\n        return PerformPromiseThen(writer._readyPromise, function () {\n          return newPromise(function (resolveRead, rejectRead) {\n            ReadableStreamDefaultReaderRead(reader, {\n              _chunkSteps: function (chunk) {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: function () {\n                return resolveRead(true);\n              },\n              _errorSteps: rejectRead\n            });\n          });\n        });\n      } // Errors must be propagated forward\n\n\n      isOrBecomesErrored(source, reader._closedPromise, function (storedError) {\n        if (!preventAbort) {\n          shutdownWithAction(function () {\n            return WritableStreamAbort(dest, storedError);\n          }, true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      }); // Errors must be propagated backward\n\n      isOrBecomesErrored(dest, writer._closedPromise, function (storedError) {\n        if (!preventCancel) {\n          shutdownWithAction(function () {\n            return ReadableStreamCancel(source, storedError);\n          }, true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      }); // Closing must be propagated forward\n\n      isOrBecomesClosed(source, reader._closedPromise, function () {\n        if (!preventClose) {\n          shutdownWithAction(function () {\n            return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);\n          });\n        } else {\n          shutdown();\n        }\n      }); // Closing must be propagated backward\n\n      if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n        var destClosed_1 = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n        if (!preventCancel) {\n          shutdownWithAction(function () {\n            return ReadableStreamCancel(source, destClosed_1);\n          }, true, destClosed_1);\n        } else {\n          shutdown(true, destClosed_1);\n        }\n      }\n\n      setPromiseIsHandledToTrue(pipeLoop());\n\n      function waitForWritesToFinish() {\n        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n        // for that too.\n        var oldCurrentWrite = currentWrite;\n        return PerformPromiseThen(currentWrite, function () {\n          return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined;\n        });\n      }\n\n      function isOrBecomesErrored(stream, promise, action) {\n        if (stream._state === 'errored') {\n          action(stream._storedError);\n        } else {\n          uponRejection(promise, action);\n        }\n      }\n\n      function isOrBecomesClosed(stream, promise, action) {\n        if (stream._state === 'closed') {\n          action();\n        } else {\n          uponFulfillment(promise, action);\n        }\n      }\n\n      function shutdownWithAction(action, originalIsError, originalError) {\n        if (shuttingDown) {\n          return;\n        }\n\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), doTheRest);\n        } else {\n          doTheRest();\n        }\n\n        function doTheRest() {\n          uponPromise(action(), function () {\n            return finalize(originalIsError, originalError);\n          }, function (newError) {\n            return finalize(true, newError);\n          });\n        }\n      }\n\n      function shutdown(isError, error) {\n        if (shuttingDown) {\n          return;\n        }\n\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), function () {\n            return finalize(isError, error);\n          });\n        } else {\n          finalize(isError, error);\n        }\n      }\n\n      function finalize(isError, error) {\n        WritableStreamDefaultWriterRelease(writer);\n        ReadableStreamReaderGenericRelease(reader);\n\n        if (signal !== undefined) {\n          signal.removeEventListener('abort', abortAlgorithm);\n        }\n\n        if (isError) {\n          reject(error);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamDefaultController =\n  /** @class */\n  function () {\n    function ReadableStreamDefaultController() {\n      throw new TypeError('Illegal constructor');\n    }\n\n    Object.defineProperty(ReadableStreamDefaultController.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n       * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n       */\n      get: function () {\n        if (!IsReadableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$1('desiredSize');\n        }\n\n        return ReadableStreamDefaultControllerGetDesiredSize(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n\n    ReadableStreamDefaultController.prototype.close = function () {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('close');\n      }\n\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits close');\n      }\n\n      ReadableStreamDefaultControllerClose(this);\n    };\n\n    ReadableStreamDefaultController.prototype.enqueue = function (chunk) {\n      if (chunk === void 0) {\n        chunk = undefined;\n      }\n\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('enqueue');\n      }\n\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits enqueue');\n      }\n\n      return ReadableStreamDefaultControllerEnqueue(this, chunk);\n    };\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n\n\n    ReadableStreamDefaultController.prototype.error = function (e) {\n      if (e === void 0) {\n        e = undefined;\n      }\n\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('error');\n      }\n\n      ReadableStreamDefaultControllerError(this, e);\n    };\n    /** @internal */\n\n\n    ReadableStreamDefaultController.prototype[CancelSteps] = function (reason) {\n      ResetQueue(this);\n\n      var result = this._cancelAlgorithm(reason);\n\n      ReadableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    };\n    /** @internal */\n\n\n    ReadableStreamDefaultController.prototype[PullSteps] = function (readRequest) {\n      var stream = this._controlledReadableStream;\n\n      if (this._queue.length > 0) {\n        var chunk = DequeueValue(this);\n\n        if (this._closeRequested && this._queue.length === 0) {\n          ReadableStreamDefaultControllerClearAlgorithms(this);\n          ReadableStreamClose(stream);\n        } else {\n          ReadableStreamDefaultControllerCallPullIfNeeded(this);\n        }\n\n        readRequest._chunkSteps(chunk);\n      } else {\n        ReadableStreamAddReadRequest(stream, readRequest);\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n    };\n\n    return ReadableStreamDefaultController;\n  }();\n\n  Object.defineProperties(ReadableStreamDefaultController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultController',\n      configurable: true\n    });\n  } // Abstract operations for the ReadableStreamDefaultController.\n\n\n  function IsReadableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamDefaultController;\n  }\n\n  function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n    var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n\n    if (!shouldPull) {\n      return;\n    }\n\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n\n    controller._pulling = true;\n\n    var pullPromise = controller._pullAlgorithm();\n\n    uponPromise(pullPromise, function () {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    }, function (e) {\n      ReadableStreamDefaultControllerError(controller, e);\n    });\n  }\n\n  function ReadableStreamDefaultControllerShouldCallPull(controller) {\n    var stream = controller._controlledReadableStream;\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return false;\n    }\n\n    if (!controller._started) {\n      return false;\n    }\n\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n\n    var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n\n    if (desiredSize > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  } // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\n\n  function ReadableStreamDefaultControllerClose(controller) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n\n    var stream = controller._controlledReadableStream;\n    controller._closeRequested = true;\n\n    if (controller._queue.length === 0) {\n      ReadableStreamDefaultControllerClearAlgorithms(controller);\n      ReadableStreamClose(stream);\n    }\n  }\n\n  function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n\n    var stream = controller._controlledReadableStream;\n\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      ReadableStreamFulfillReadRequest(stream, chunk, false);\n    } else {\n      var chunkSize = void 0;\n\n      try {\n        chunkSize = controller._strategySizeAlgorithm(chunk);\n      } catch (chunkSizeE) {\n        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n        throw chunkSizeE;\n      }\n\n      try {\n        EnqueueValueWithSize(controller, chunk, chunkSize);\n      } catch (enqueueE) {\n        ReadableStreamDefaultControllerError(controller, enqueueE);\n        throw enqueueE;\n      }\n    }\n\n    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableStreamDefaultControllerError(controller, e) {\n    var stream = controller._controlledReadableStream;\n\n    if (stream._state !== 'readable') {\n      return;\n    }\n\n    ResetQueue(controller);\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n\n  function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n    var state = controller._controlledReadableStream._state;\n\n    if (state === 'errored') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return controller._strategyHWM - controller._queueTotalSize;\n  } // This is used in the implementation of TransformStream.\n\n\n  function ReadableStreamDefaultControllerHasBackpressure(controller) {\n    if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n    var state = controller._controlledReadableStream._state;\n\n    if (!controller._closeRequested && state === 'readable') {\n      return true;\n    }\n\n    return false;\n  }\n\n  function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledReadableStream = stream;\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._started = false;\n    controller._closeRequested = false;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    stream._readableStreamController = controller;\n    var startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), function () {\n      controller._started = true;\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }, function (r) {\n      ReadableStreamDefaultControllerError(controller, r);\n    });\n  }\n\n  function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n    var controller = Object.create(ReadableStreamDefaultController.prototype);\n\n    var startAlgorithm = function () {\n      return undefined;\n    };\n\n    var pullAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    var cancelAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (underlyingSource.start !== undefined) {\n      startAlgorithm = function () {\n        return underlyingSource.start(controller);\n      };\n    }\n\n    if (underlyingSource.pull !== undefined) {\n      pullAlgorithm = function () {\n        return underlyingSource.pull(controller);\n      };\n    }\n\n    if (underlyingSource.cancel !== undefined) {\n      cancelAlgorithm = function (reason) {\n        return underlyingSource.cancel(reason);\n      };\n    }\n\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n  } // Helper functions for the ReadableStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException$1(name) {\n    return new TypeError(\"ReadableStreamDefaultController.prototype.\" + name + \" can only be used on a ReadableStreamDefaultController\");\n  }\n\n  function ReadableStreamTee(stream, cloneForBranch2) {\n    if (IsReadableByteStreamController(stream._readableStreamController)) {\n      return ReadableByteStreamTee(stream);\n    }\n\n    return ReadableStreamDefaultTee(stream);\n  }\n\n  function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var reading = false;\n    var readAgain = false;\n    var canceled1 = false;\n    var canceled2 = false;\n    var reason1;\n    var reason2;\n    var branch1;\n    var branch2;\n    var resolveCancelPromise;\n    var cancelPromise = newPromise(function (resolve) {\n      resolveCancelPromise = resolve;\n    });\n\n    function pullAlgorithm() {\n      if (reading) {\n        readAgain = true;\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            readAgain = false;\n            var chunk1 = chunk;\n            var chunk2 = chunk; // There is no way to access the cloning code right now in the reference implementation.\n            // If we add one then we'll need an implementation for serializable objects.\n            // if (!canceled2 && cloneForBranch2) {\n            //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n            // }\n\n            if (!canceled1) {\n              ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n\n            if (!canceled2) {\n              ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n\n            reading = false;\n\n            if (readAgain) {\n              pullAlgorithm();\n            }\n          });\n        },\n        _closeSteps: function () {\n          reading = false;\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n          }\n\n          if (!canceled2) {\n            ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n          }\n\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function () {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promiseResolvedWith(undefined);\n    }\n\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n\n      if (canceled2) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n\n      if (canceled1) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function startAlgorithm() {// do nothing\n    }\n\n    branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n    branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n    uponRejection(reader._closedPromise, function (r) {\n      ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n      ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n    return [branch1, branch2];\n  }\n\n  function ReadableByteStreamTee(stream) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var reading = false;\n    var readAgainForBranch1 = false;\n    var readAgainForBranch2 = false;\n    var canceled1 = false;\n    var canceled2 = false;\n    var reason1;\n    var reason2;\n    var branch1;\n    var branch2;\n    var resolveCancelPromise;\n    var cancelPromise = newPromise(function (resolve) {\n      resolveCancelPromise = resolve;\n    });\n\n    function forwardReaderError(thisReader) {\n      uponRejection(thisReader._closedPromise, function (r) {\n        if (thisReader !== reader) {\n          return;\n        }\n\n        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      });\n    }\n\n    function pullWithDefaultReader() {\n      if (IsReadableStreamBYOBReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamDefaultReader(stream);\n        forwardReaderError(reader);\n      }\n\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            var chunk1 = chunk;\n            var chunk2 = chunk;\n\n            if (!canceled1 && !canceled2) {\n              try {\n                chunk2 = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n            }\n\n            if (!canceled1) {\n              ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n\n            if (!canceled2) {\n              ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n\n            reading = false;\n\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: function () {\n          reading = false;\n\n          if (!canceled1) {\n            ReadableByteStreamControllerClose(branch1._readableStreamController);\n          }\n\n          if (!canceled2) {\n            ReadableByteStreamControllerClose(branch2._readableStreamController);\n          }\n\n          if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n          }\n\n          if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n          }\n\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function () {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n    }\n\n    function pullWithBYOBReader(view, forBranch2) {\n      if (IsReadableStreamDefaultReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamBYOBReader(stream);\n        forwardReaderError(reader);\n      }\n\n      var byobBranch = forBranch2 ? branch2 : branch1;\n      var otherBranch = forBranch2 ? branch1 : branch2;\n      var readIntoRequest = {\n        _chunkSteps: function (chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            var byobCanceled = forBranch2 ? canceled2 : canceled1;\n            var otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n            if (!otherCanceled) {\n              var clonedChunk = void 0;\n\n              try {\n                clonedChunk = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n\n              if (!byobCanceled) {\n                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n              }\n\n              ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n            } else if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n\n            reading = false;\n\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: function (chunk) {\n          reading = false;\n          var byobCanceled = forBranch2 ? canceled2 : canceled1;\n          var otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n          }\n\n          if (!otherCanceled) {\n            ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n          }\n\n          if (chunk !== undefined) {\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n\n            if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n              ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n            }\n          }\n\n          if (!byobCanceled || !otherCanceled) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function () {\n          reading = false;\n        }\n      };\n      ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n    }\n\n    function pull1Algorithm() {\n      if (reading) {\n        readAgainForBranch1 = true;\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, false);\n      }\n\n      return promiseResolvedWith(undefined);\n    }\n\n    function pull2Algorithm() {\n      if (reading) {\n        readAgainForBranch2 = true;\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, true);\n      }\n\n      return promiseResolvedWith(undefined);\n    }\n\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n\n      if (canceled2) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n\n      if (canceled1) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function startAlgorithm() {\n      return;\n    }\n\n    branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n    branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n    forwardReaderError(reader);\n    return [branch1, branch2];\n  }\n\n  function convertUnderlyingDefaultOrByteSource(source, context) {\n    assertDictionary(source, context);\n    var original = source;\n    var autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n    var cancel = original === null || original === void 0 ? void 0 : original.cancel;\n    var pull = original === null || original === void 0 ? void 0 : original.pull;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var type = original === null || original === void 0 ? void 0 : original.type;\n    return {\n      autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, context + \" has member 'autoAllocateChunkSize' that\"),\n      cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, context + \" has member 'cancel' that\"),\n      pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, context + \" has member 'pull' that\"),\n      start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, context + \" has member 'start' that\"),\n      type: type === undefined ? undefined : convertReadableStreamType(type, context + \" has member 'type' that\")\n    };\n  }\n\n  function convertUnderlyingSourceCancelCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (reason) {\n      return promiseCall(fn, original, [reason]);\n    };\n  }\n\n  function convertUnderlyingSourcePullCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return promiseCall(fn, original, [controller]);\n    };\n  }\n\n  function convertUnderlyingSourceStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n\n  function convertReadableStreamType(type, context) {\n    type = \"\" + type;\n\n    if (type !== 'bytes') {\n      throw new TypeError(context + \" '\" + type + \"' is not a valid enumeration value for ReadableStreamType\");\n    }\n\n    return type;\n  }\n\n  function convertReaderOptions(options, context) {\n    assertDictionary(options, context);\n    var mode = options === null || options === void 0 ? void 0 : options.mode;\n    return {\n      mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, context + \" has member 'mode' that\")\n    };\n  }\n\n  function convertReadableStreamReaderMode(mode, context) {\n    mode = \"\" + mode;\n\n    if (mode !== 'byob') {\n      throw new TypeError(context + \" '\" + mode + \"' is not a valid enumeration value for ReadableStreamReaderMode\");\n    }\n\n    return mode;\n  }\n\n  function convertIteratorOptions(options, context) {\n    assertDictionary(options, context);\n    var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    return {\n      preventCancel: Boolean(preventCancel)\n    };\n  }\n\n  function convertPipeOptions(options, context) {\n    assertDictionary(options, context);\n    var preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n    var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    var preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n    var signal = options === null || options === void 0 ? void 0 : options.signal;\n\n    if (signal !== undefined) {\n      assertAbortSignal(signal, context + \" has member 'signal' that\");\n    }\n\n    return {\n      preventAbort: Boolean(preventAbort),\n      preventCancel: Boolean(preventCancel),\n      preventClose: Boolean(preventClose),\n      signal: signal\n    };\n  }\n\n  function assertAbortSignal(signal, context) {\n    if (!isAbortSignal(signal)) {\n      throw new TypeError(context + \" is not an AbortSignal.\");\n    }\n  }\n\n  function convertReadableWritablePair(pair, context) {\n    assertDictionary(pair, context);\n    var readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n    assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n    assertReadableStream(readable, context + \" has member 'readable' that\");\n    var writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n    assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n    assertWritableStream(writable, context + \" has member 'writable' that\");\n    return {\n      readable: readable,\n      writable: writable\n    };\n  }\n  /**\n   * A readable stream represents a source of data, from which you can read.\n   *\n   * @public\n   */\n\n\n  var ReadableStream =\n  /** @class */\n  function () {\n    function ReadableStream(rawUnderlyingSource, rawStrategy) {\n      if (rawUnderlyingSource === void 0) {\n        rawUnderlyingSource = {};\n      }\n\n      if (rawStrategy === void 0) {\n        rawStrategy = {};\n      }\n\n      if (rawUnderlyingSource === undefined) {\n        rawUnderlyingSource = null;\n      } else {\n        assertObject(rawUnderlyingSource, 'First parameter');\n      }\n\n      var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      var underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n      InitializeReadableStream(this);\n\n      if (underlyingSource.type === 'bytes') {\n        if (strategy.size !== undefined) {\n          throw new RangeError('The strategy for a byte stream cannot have a size function');\n        }\n\n        var highWaterMark = ExtractHighWaterMark(strategy, 0);\n        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n      } else {\n        var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n        var highWaterMark = ExtractHighWaterMark(strategy, 1);\n        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n      }\n    }\n\n    Object.defineProperty(ReadableStream.prototype, \"locked\", {\n      /**\n       * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n       */\n      get: function () {\n        if (!IsReadableStream(this)) {\n          throw streamBrandCheckException$1('locked');\n        }\n\n        return IsReadableStreamLocked(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n     *\n     * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n     * method, which might or might not use it.\n     */\n\n    ReadableStream.prototype.cancel = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n      }\n\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n      }\n\n      return ReadableStreamCancel(this, reason);\n    };\n\n    ReadableStream.prototype.getReader = function (rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = undefined;\n      }\n\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('getReader');\n      }\n\n      var options = convertReaderOptions(rawOptions, 'First parameter');\n\n      if (options.mode === undefined) {\n        return AcquireReadableStreamDefaultReader(this);\n      }\n\n      return AcquireReadableStreamBYOBReader(this);\n    };\n\n    ReadableStream.prototype.pipeThrough = function (rawTransform, rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = {};\n      }\n\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('pipeThrough');\n      }\n\n      assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n      var transform = convertReadableWritablePair(rawTransform, 'First parameter');\n      var options = convertPipeOptions(rawOptions, 'Second parameter');\n\n      if (IsReadableStreamLocked(this)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n      }\n\n      if (IsWritableStreamLocked(transform.writable)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n      }\n\n      var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n      setPromiseIsHandledToTrue(promise);\n      return transform.readable;\n    };\n\n    ReadableStream.prototype.pipeTo = function (destination, rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = {};\n      }\n\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n      }\n\n      if (destination === undefined) {\n        return promiseRejectedWith(\"Parameter 1 is required in 'pipeTo'.\");\n      }\n\n      if (!IsWritableStream(destination)) {\n        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n      }\n\n      var options;\n\n      try {\n        options = convertPipeOptions(rawOptions, 'Second parameter');\n      } catch (e) {\n        return promiseRejectedWith(e);\n      }\n\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n      }\n\n      if (IsWritableStreamLocked(destination)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n      }\n\n      return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n    };\n    /**\n     * Tees this readable stream, returning a two-element array containing the two resulting branches as\n     * new {@link ReadableStream} instances.\n     *\n     * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n     * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n     * propagated to the stream's underlying source.\n     *\n     * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n     * this could allow interference between the two branches.\n     */\n\n\n    ReadableStream.prototype.tee = function () {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('tee');\n      }\n\n      var branches = ReadableStreamTee(this);\n      return CreateArrayFromList(branches);\n    };\n\n    ReadableStream.prototype.values = function (rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = undefined;\n      }\n\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('values');\n      }\n\n      var options = convertIteratorOptions(rawOptions, 'First parameter');\n      return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n    };\n\n    return ReadableStream;\n  }();\n\n  Object.defineProperties(ReadableStream.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    getReader: {\n      enumerable: true\n    },\n    pipeThrough: {\n      enumerable: true\n    },\n    pipeTo: {\n      enumerable: true\n    },\n    tee: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStream',\n      configurable: true\n    });\n  }\n\n  if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n      value: ReadableStream.prototype.values,\n      writable: true,\n      configurable: true\n    });\n  } // Abstract operations for the ReadableStream.\n  // Throws if and only if startAlgorithm throws.\n\n\n  function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n    if (highWaterMark === void 0) {\n      highWaterMark = 1;\n    }\n\n    if (sizeAlgorithm === void 0) {\n      sizeAlgorithm = function () {\n        return 1;\n      };\n    }\n\n    var stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    var controller = Object.create(ReadableStreamDefaultController.prototype);\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  } // Throws if and only if startAlgorithm throws.\n\n\n  function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n    var stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    var controller = Object.create(ReadableByteStreamController.prototype);\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n    return stream;\n  }\n\n  function InitializeReadableStream(stream) {\n    stream._state = 'readable';\n    stream._reader = undefined;\n    stream._storedError = undefined;\n    stream._disturbed = false;\n  }\n\n  function IsReadableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n      return false;\n    }\n\n    return x instanceof ReadableStream;\n  }\n\n  function IsReadableStreamLocked(stream) {\n    if (stream._reader === undefined) {\n      return false;\n    }\n\n    return true;\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamCancel(stream, reason) {\n    stream._disturbed = true;\n\n    if (stream._state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (stream._state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    ReadableStreamClose(stream);\n    var reader = stream._reader;\n\n    if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n      reader._readIntoRequests.forEach(function (readIntoRequest) {\n        readIntoRequest._closeSteps(undefined);\n      });\n\n      reader._readIntoRequests = new SimpleQueue();\n    }\n\n    var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n\n    return transformPromiseWith(sourceCancelPromise, noop);\n  }\n\n  function ReadableStreamClose(stream) {\n    stream._state = 'closed';\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return;\n    }\n\n    defaultReaderClosedPromiseResolve(reader);\n\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(function (readRequest) {\n        readRequest._closeSteps();\n      });\n\n      reader._readRequests = new SimpleQueue();\n    }\n  }\n\n  function ReadableStreamError(stream, e) {\n    stream._state = 'errored';\n    stream._storedError = e;\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return;\n    }\n\n    defaultReaderClosedPromiseReject(reader, e);\n\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(function (readRequest) {\n        readRequest._errorSteps(e);\n      });\n\n      reader._readRequests = new SimpleQueue();\n    } else {\n      reader._readIntoRequests.forEach(function (readIntoRequest) {\n        readIntoRequest._errorSteps(e);\n      });\n\n      reader._readIntoRequests = new SimpleQueue();\n    }\n  } // Helper functions for the ReadableStream.\n\n\n  function streamBrandCheckException$1(name) {\n    return new TypeError(\"ReadableStream.prototype.\" + name + \" can only be used on a ReadableStream\");\n  }\n\n  function convertQueuingStrategyInit(init, context) {\n    assertDictionary(init, context);\n    var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n    return {\n      highWaterMark: convertUnrestrictedDouble(highWaterMark)\n    };\n  } // The size function must not have a prototype property nor be a constructor\n\n\n  var byteLengthSizeFunction = function (chunk) {\n    return chunk.byteLength;\n  };\n\n  try {\n    Object.defineProperty(byteLengthSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {// This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of bytes in each chunk.\n   *\n   * @public\n   */\n\n\n  var ByteLengthQueuingStrategy =\n  /** @class */\n  function () {\n    function ByteLengthQueuingStrategy(options) {\n      assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"highWaterMark\", {\n      /**\n       * Returns the high water mark provided to the constructor.\n       */\n      get: function () {\n        if (!IsByteLengthQueuingStrategy(this)) {\n          throw byteLengthBrandCheckException('highWaterMark');\n        }\n\n        return this._byteLengthQueuingStrategyHighWaterMark;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"size\", {\n      /**\n       * Measures the size of `chunk` by returning the value of its `byteLength` property.\n       */\n      get: function () {\n        if (!IsByteLengthQueuingStrategy(this)) {\n          throw byteLengthBrandCheckException('size');\n        }\n\n        return byteLengthSizeFunction;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return ByteLengthQueuingStrategy;\n  }();\n\n  Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ByteLengthQueuingStrategy',\n      configurable: true\n    });\n  } // Helper functions for the ByteLengthQueuingStrategy.\n\n\n  function byteLengthBrandCheckException(name) {\n    return new TypeError(\"ByteLengthQueuingStrategy.prototype.\" + name + \" can only be used on a ByteLengthQueuingStrategy\");\n  }\n\n  function IsByteLengthQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n\n    return x instanceof ByteLengthQueuingStrategy;\n  } // The size function must not have a prototype property nor be a constructor\n\n\n  var countSizeFunction = function () {\n    return 1;\n  };\n\n  try {\n    Object.defineProperty(countSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {// This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of chunks.\n   *\n   * @public\n   */\n\n\n  var CountQueuingStrategy =\n  /** @class */\n  function () {\n    function CountQueuingStrategy(options) {\n      assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n\n    Object.defineProperty(CountQueuingStrategy.prototype, \"highWaterMark\", {\n      /**\n       * Returns the high water mark provided to the constructor.\n       */\n      get: function () {\n        if (!IsCountQueuingStrategy(this)) {\n          throw countBrandCheckException('highWaterMark');\n        }\n\n        return this._countQueuingStrategyHighWaterMark;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(CountQueuingStrategy.prototype, \"size\", {\n      /**\n       * Measures the size of `chunk` by always returning 1.\n       * This ensures that the total queue size is a count of the number of chunks in the queue.\n       */\n      get: function () {\n        if (!IsCountQueuingStrategy(this)) {\n          throw countBrandCheckException('size');\n        }\n\n        return countSizeFunction;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return CountQueuingStrategy;\n  }();\n\n  Object.defineProperties(CountQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'CountQueuingStrategy',\n      configurable: true\n    });\n  } // Helper functions for the CountQueuingStrategy.\n\n\n  function countBrandCheckException(name) {\n    return new TypeError(\"CountQueuingStrategy.prototype.\" + name + \" can only be used on a CountQueuingStrategy\");\n  }\n\n  function IsCountQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n\n    return x instanceof CountQueuingStrategy;\n  }\n\n  function convertTransformer(original, context) {\n    assertDictionary(original, context);\n    var flush = original === null || original === void 0 ? void 0 : original.flush;\n    var readableType = original === null || original === void 0 ? void 0 : original.readableType;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var transform = original === null || original === void 0 ? void 0 : original.transform;\n    var writableType = original === null || original === void 0 ? void 0 : original.writableType;\n    return {\n      flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, context + \" has member 'flush' that\"),\n      readableType: readableType,\n      start: start === undefined ? undefined : convertTransformerStartCallback(start, original, context + \" has member 'start' that\"),\n      transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, context + \" has member 'transform' that\"),\n      writableType: writableType\n    };\n  }\n\n  function convertTransformerFlushCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return promiseCall(fn, original, [controller]);\n    };\n  }\n\n  function convertTransformerStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n\n  function convertTransformerTransformCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (chunk, controller) {\n      return promiseCall(fn, original, [chunk, controller]);\n    };\n  } // Class TransformStream\n\n  /**\n   * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n   * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n   * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n   * made available for reading from the readable side.\n   *\n   * @public\n   */\n\n\n  var TransformStream =\n  /** @class */\n  function () {\n    function TransformStream(rawTransformer, rawWritableStrategy, rawReadableStrategy) {\n      if (rawTransformer === void 0) {\n        rawTransformer = {};\n      }\n\n      if (rawWritableStrategy === void 0) {\n        rawWritableStrategy = {};\n      }\n\n      if (rawReadableStrategy === void 0) {\n        rawReadableStrategy = {};\n      }\n\n      if (rawTransformer === undefined) {\n        rawTransformer = null;\n      }\n\n      var writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n      var readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n      var transformer = convertTransformer(rawTransformer, 'First parameter');\n\n      if (transformer.readableType !== undefined) {\n        throw new RangeError('Invalid readableType specified');\n      }\n\n      if (transformer.writableType !== undefined) {\n        throw new RangeError('Invalid writableType specified');\n      }\n\n      var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n      var readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n      var writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n      var writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n      var startPromise_resolve;\n      var startPromise = newPromise(function (resolve) {\n        startPromise_resolve = resolve;\n      });\n      InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n      SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n      if (transformer.start !== undefined) {\n        startPromise_resolve(transformer.start(this._transformStreamController));\n      } else {\n        startPromise_resolve(undefined);\n      }\n    }\n\n    Object.defineProperty(TransformStream.prototype, \"readable\", {\n      /**\n       * The readable side of the transform stream.\n       */\n      get: function () {\n        if (!IsTransformStream(this)) {\n          throw streamBrandCheckException('readable');\n        }\n\n        return this._readable;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(TransformStream.prototype, \"writable\", {\n      /**\n       * The writable side of the transform stream.\n       */\n      get: function () {\n        if (!IsTransformStream(this)) {\n          throw streamBrandCheckException('writable');\n        }\n\n        return this._writable;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return TransformStream;\n  }();\n\n  Object.defineProperties(TransformStream.prototype, {\n    readable: {\n      enumerable: true\n    },\n    writable: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStream',\n      configurable: true\n    });\n  }\n\n  function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n    function startAlgorithm() {\n      return startPromise;\n    }\n\n    function writeAlgorithm(chunk) {\n      return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n    }\n\n    function abortAlgorithm(reason) {\n      return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n    }\n\n    function closeAlgorithm() {\n      return TransformStreamDefaultSinkCloseAlgorithm(stream);\n    }\n\n    stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n\n    function pullAlgorithm() {\n      return TransformStreamDefaultSourcePullAlgorithm(stream);\n    }\n\n    function cancelAlgorithm(reason) {\n      TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n      return promiseResolvedWith(undefined);\n    }\n\n    stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm); // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n\n    stream._backpressure = undefined;\n    stream._backpressureChangePromise = undefined;\n    stream._backpressureChangePromise_resolve = undefined;\n    TransformStreamSetBackpressure(stream, true);\n    stream._transformStreamController = undefined;\n  }\n\n  function IsTransformStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n      return false;\n    }\n\n    return x instanceof TransformStream;\n  } // This is a no-op if both sides are already errored.\n\n\n  function TransformStreamError(stream, e) {\n    ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n  }\n\n  function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n    TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n    WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n\n    if (stream._backpressure) {\n      // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n      // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n      // _backpressure is set.\n      TransformStreamSetBackpressure(stream, false);\n    }\n  }\n\n  function TransformStreamSetBackpressure(stream, backpressure) {\n    // Passes also when called during construction.\n    if (stream._backpressureChangePromise !== undefined) {\n      stream._backpressureChangePromise_resolve();\n    }\n\n    stream._backpressureChangePromise = newPromise(function (resolve) {\n      stream._backpressureChangePromise_resolve = resolve;\n    });\n    stream._backpressure = backpressure;\n  } // Class TransformStreamDefaultController\n\n  /**\n   * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n   *\n   * @public\n   */\n\n\n  var TransformStreamDefaultController =\n  /** @class */\n  function () {\n    function TransformStreamDefaultController() {\n      throw new TypeError('Illegal constructor');\n    }\n\n    Object.defineProperty(TransformStreamDefaultController.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n       */\n      get: function () {\n        if (!IsTransformStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException('desiredSize');\n        }\n\n        var readableController = this._controlledTransformStream._readable._readableStreamController;\n        return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    TransformStreamDefaultController.prototype.enqueue = function (chunk) {\n      if (chunk === void 0) {\n        chunk = undefined;\n      }\n\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('enqueue');\n      }\n\n      TransformStreamDefaultControllerEnqueue(this, chunk);\n    };\n    /**\n     * Errors both the readable side and the writable side of the controlled transform stream, making all future\n     * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n     */\n\n\n    TransformStreamDefaultController.prototype.error = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('error');\n      }\n\n      TransformStreamDefaultControllerError(this, reason);\n    };\n    /**\n     * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n     * transformer only needs to consume a portion of the chunks written to the writable side.\n     */\n\n\n    TransformStreamDefaultController.prototype.terminate = function () {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('terminate');\n      }\n\n      TransformStreamDefaultControllerTerminate(this);\n    };\n\n    return TransformStreamDefaultController;\n  }();\n\n  Object.defineProperties(TransformStreamDefaultController.prototype, {\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    terminate: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStreamDefaultController',\n      configurable: true\n    });\n  } // Transform Stream Default Controller Abstract Operations\n\n\n  function IsTransformStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n      return false;\n    }\n\n    return x instanceof TransformStreamDefaultController;\n  }\n\n  function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n    controller._controlledTransformStream = stream;\n    stream._transformStreamController = controller;\n    controller._transformAlgorithm = transformAlgorithm;\n    controller._flushAlgorithm = flushAlgorithm;\n  }\n\n  function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n    var controller = Object.create(TransformStreamDefaultController.prototype);\n\n    var transformAlgorithm = function (chunk) {\n      try {\n        TransformStreamDefaultControllerEnqueue(controller, chunk);\n        return promiseResolvedWith(undefined);\n      } catch (transformResultE) {\n        return promiseRejectedWith(transformResultE);\n      }\n    };\n\n    var flushAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (transformer.transform !== undefined) {\n      transformAlgorithm = function (chunk) {\n        return transformer.transform(chunk, controller);\n      };\n    }\n\n    if (transformer.flush !== undefined) {\n      flushAlgorithm = function () {\n        return transformer.flush(controller);\n      };\n    }\n\n    SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n  }\n\n  function TransformStreamDefaultControllerClearAlgorithms(controller) {\n    controller._transformAlgorithm = undefined;\n    controller._flushAlgorithm = undefined;\n  }\n\n  function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n    var stream = controller._controlledTransformStream;\n    var readableController = stream._readable._readableStreamController;\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n      throw new TypeError('Readable side is not in a state that permits enqueue');\n    } // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n    // accept TransformStreamDefaultControllerEnqueue() calls.\n\n\n    try {\n      ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n    } catch (e) {\n      // This happens when readableStrategy.size() throws.\n      TransformStreamErrorWritableAndUnblockWrite(stream, e);\n      throw stream._readable._storedError;\n    }\n\n    var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n\n    if (backpressure !== stream._backpressure) {\n      TransformStreamSetBackpressure(stream, true);\n    }\n  }\n\n  function TransformStreamDefaultControllerError(controller, e) {\n    TransformStreamError(controller._controlledTransformStream, e);\n  }\n\n  function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n    var transformPromise = controller._transformAlgorithm(chunk);\n\n    return transformPromiseWith(transformPromise, undefined, function (r) {\n      TransformStreamError(controller._controlledTransformStream, r);\n      throw r;\n    });\n  }\n\n  function TransformStreamDefaultControllerTerminate(controller) {\n    var stream = controller._controlledTransformStream;\n    var readableController = stream._readable._readableStreamController;\n    ReadableStreamDefaultControllerClose(readableController);\n    var error = new TypeError('TransformStream terminated');\n    TransformStreamErrorWritableAndUnblockWrite(stream, error);\n  } // TransformStreamDefaultSink Algorithms\n\n\n  function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n    var controller = stream._transformStreamController;\n\n    if (stream._backpressure) {\n      var backpressureChangePromise = stream._backpressureChangePromise;\n      return transformPromiseWith(backpressureChangePromise, function () {\n        var writable = stream._writable;\n        var state = writable._state;\n\n        if (state === 'erroring') {\n          throw writable._storedError;\n        }\n\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n      });\n    }\n\n    return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n  }\n\n  function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n    // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n    // errored.\n    TransformStreamError(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n    // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n    var readable = stream._readable;\n    var controller = stream._transformStreamController;\n\n    var flushPromise = controller._flushAlgorithm();\n\n    TransformStreamDefaultControllerClearAlgorithms(controller); // Return a promise that is fulfilled with undefined on success.\n\n    return transformPromiseWith(flushPromise, function () {\n      if (readable._state === 'errored') {\n        throw readable._storedError;\n      }\n\n      ReadableStreamDefaultControllerClose(readable._readableStreamController);\n    }, function (r) {\n      TransformStreamError(stream, r);\n      throw readable._storedError;\n    });\n  } // TransformStreamDefaultSource Algorithms\n\n\n  function TransformStreamDefaultSourcePullAlgorithm(stream) {\n    // Invariant. Enforced by the promises returned by start() and pull().\n    TransformStreamSetBackpressure(stream, false); // Prevent the next pull() call until there is backpressure.\n\n    return stream._backpressureChangePromise;\n  } // Helper functions for the TransformStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException(name) {\n    return new TypeError(\"TransformStreamDefaultController.prototype.\" + name + \" can only be used on a TransformStreamDefaultController\");\n  } // Helper functions for the TransformStream.\n\n\n  function streamBrandCheckException(name) {\n    return new TypeError(\"TransformStream.prototype.\" + name + \" can only be used on a TransformStream\");\n  }\n\n  exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n  exports.CountQueuingStrategy = CountQueuingStrategy;\n  exports.ReadableByteStreamController = ReadableByteStreamController;\n  exports.ReadableStream = ReadableStream;\n  exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n  exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n  exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n  exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n  exports.TransformStream = TransformStream;\n  exports.TransformStreamDefaultController = TransformStreamDefaultController;\n  exports.WritableStream = WritableStream;\n  exports.WritableStreamDefaultController = WritableStreamDefaultController;\n  exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["SymbolPolyfill","Symbol","iterator","description","noop","undefined","getGlobals","self","window","global","globals","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","prototype","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","value","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","TypeError","Function","apply","promiseCall","QUEUE_MAX_ARRAY_SIZE","_front","_elements","_next","_back","_cursor","_size","Object","SimpleQueue","element","oldBack","newBack","length","push","oldFront","newFront","oldCursor","newCursor","elements","callback","i","node","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","name","_closedPromise","_closedPromise_resolve","_closedPromise_reject","defaultReaderClosedPromiseResolve","AbortSteps","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","isDictionary","assertDictionary","obj","context","assertFunction","isObject","assertObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","integerPart","convertUnsignedLongLongWithEnforceRange","lowerBound","upperBound","MAX_SAFE_INTEGER","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","shift","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","defaultReaderBrandCheckException","resolvePromise","rejectPromise","_errorSteps","e","ReadableStreamDefaultReaderRead","defineProperties","cancel","enumerable","read","releaseLock","closed","toStringTag","defineProperty","configurable","hasOwnProperty","_disturbed","_readableStreamController","AsyncIteratorPrototype","asyncIterator","_a","preventCancel","_preventCancel","ReadableStreamAsyncIteratorImpl","nextSteps","_nextSteps","_ongoingPromise","returnSteps","_returnSteps","_isFinished","_this","result","ReadableStreamAsyncIteratorPrototype","next","IsReadableStreamAsyncIterator","streamAsyncIteratorBrandCheckException","_asyncIteratorImpl","return","setPrototypeOf","AcquireReadableStreamAsyncIterator","impl","create","NumberIsNaN","isNaN","CreateArrayFromList","slice","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","TransferArrayBuffer","O","IsDetachedBuffer","ArrayBufferSlice","buffer","begin","end","ArrayBuffer","IsNonNegativeNumber","CloneAsUint8Array","byteOffset","byteLength","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","Infinity","RangeError","PeekQueueValue","peek","ResetQueue","ReadableStreamBYOBRequest","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","view","isView","ReadableByteStreamControllerRespondWithNewView","respond","respondWithNewView","ReadableByteStreamController","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","ReadableByteStreamControllerGetDesiredSize","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","ReadableByteStreamControllerEnqueue","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","close","enqueue","error","byobRequest","desiredSize","controller","shouldPull","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","pullPromise","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerPullInto","readIntoRequest","constructor","DataView","BYTES_PER_ELEMENT","ctor","ReadableStreamAddReadIntoRequest","emptyView","ReadableByteStreamControllerRespondInClosedState","firstDescriptor","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerRespondInReadableState","remainderSize","remainder","ReadableByteStreamControllerRespondInternal","descriptor","_started","firstPendingPullInto","transferredBuffer","transferredView","ReadableStreamError","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","startResult","r","SetUpReadableByteStreamControllerFromUnderlyingSource","underlyingByteSource","start","pull","request","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","_readIntoRequests","IsReadableStreamBYOBReader","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSink","original","abort","type","write","convertUnderlyingSinkAbortCallback","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","isAbortSignal","aborted","supportsAbortController","AbortController","createAbortController","rawUnderlyingSink","rawStrategy","underlyingSink","InitializeWritableStream","sizeAlgorithm","SetUpWritableStreamDefaultControllerFromUnderlyingSink","WritableStream","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","AcquireWritableStreamDefaultWriter","getWriter","locked","WritableStreamDefaultWriter","CreateWritableStream","writeAlgorithm","closeAlgorithm","abortAlgorithm","WritableStreamDefaultController","SetUpWritableStreamDefaultController","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","WritableStreamDefaultControllerClose","WritableStreamAddWriteRequest","writeRequest","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","forEach","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamFinishInFlightClose","defaultWriterClosedPromiseResolve","WritableStreamFinishInFlightCloseWithError","WritableStreamMarkCloseRequestInFlight","WritableStreamMarkFirstWriteRequestInFlight","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseReset","_ownerWritableStream","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseInitializeAsResolved","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterCloseWithErrorPropagation","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","WritableStreamDefaultControllerGetDesiredSize","releasedError","chunkSize","WritableStreamDefaultControllerGetChunkSize","WritableStreamDefaultControllerWrite","closeSentinel","IsWritableStreamDefaultController","defaultControllerBrandCheckException","signal","_controlledWritableStream","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","abortReason","_strategySizeAlgorithm","_writeAlgorithm","_closeAlgorithm","WritableStreamDefaultControllerGetBackpressure","startPromise","WritableStreamDefaultControllerAdvanceQueueIfNeeded","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","enqueueE","WritableStreamDefaultControllerProcessClose","WritableStreamDefaultControllerProcessWrite","sinkClosePromise","sinkWritePromise","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException","isDOMExceptionConstructor","createDOMExceptionPolyfill","message","Error","captureStackTrace","writable","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","map","addEventListener","pipeLoop","resolveLoop","rejectLoop","pipeStep","resolveRead","rejectRead","isOrBecomesErrored","shutdown","isOrBecomesClosed","destClosed_1","waitForWritesToFinish","oldCurrentWrite","action","originalIsError","originalError","doTheRest","newError","isError","finalize","removeEventListener","ReadableStreamDefaultController","IsReadableStreamDefaultController","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","ReadableStreamDefaultControllerHasBackpressure","SetUpReadableStreamDefaultController","SetUpReadableStreamDefaultControllerFromUnderlyingSource","underlyingSource","ReadableStreamTee","cloneForBranch2","ReadableByteStreamTee","ReadableStreamDefaultTee","reading","readAgain","canceled1","canceled2","reason1","reason2","branch1","branch2","resolveCancelPromise","cancelPromise","chunk1","chunk2","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","CreateReadableStream","readAgainForBranch1","readAgainForBranch2","forwardReaderError","thisReader","pullWithDefaultReader","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","otherCanceled","clonedChunk","CreateReadableByteStream","convertUnderlyingDefaultOrByteSource","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReaderOptions","options","mode","convertReadableStreamReaderMode","convertIteratorOptions","Boolean","convertPipeOptions","assertAbortSignal","convertReadableWritablePair","readable","rawUnderlyingSource","InitializeReadableStream","ReadableStream","rawOptions","rawTransform","transform","destination","branches","getReader","pipeThrough","pipeTo","tee","values","sourceCancelPromise","convertQueuingStrategyInit","byteLengthSizeFunction","_byteLengthQueuingStrategyHighWaterMark","ByteLengthQueuingStrategy","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","_countQueuingStrategyHighWaterMark","CountQueuingStrategy","IsCountQueuingStrategy","countBrandCheckException","convertTransformer","flush","readableType","writableType","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","InitializeTransformStream","SetUpTransformStreamDefaultControllerFromTransformer","_transformStreamController","TransformStream","IsTransformStream","_readable","_writable","TransformStreamDefaultSinkWriteAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise","_backpressureChangePromise_resolve","TransformStreamSetBackpressure","TransformStreamError","TransformStreamDefaultControllerClearAlgorithms","TransformStreamDefaultController","IsTransformStreamDefaultController","readableController","_controlledTransformStream","TransformStreamDefaultControllerEnqueue","TransformStreamDefaultControllerError","TransformStreamDefaultControllerTerminate","terminate","SetUpTransformStreamDefaultController","transformAlgorithm","flushAlgorithm","_transformAlgorithm","_flushAlgorithm","transformResultE","TransformStreamDefaultControllerPerformTransform","transformPromise","backpressureChangePromise","flushPromise"],"sources":["/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/stub/symbol.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/utils.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/helpers/miscellaneous.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/helpers/webidl.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/simple-queue.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/generic-reader.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/abstract-ops/internal-methods.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/stub/number-isfinite.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/stub/math-trunc.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/basic.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/readable-stream.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/default-reader.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/target/es5/stub/async-iterator-prototype.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/async-iterator.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/stub/number-isnan.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/abstract-ops/ecmascript.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/abstract-ops/miscellaneous.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/abstract-ops/queue-with-sizes.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/byte-stream-controller.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/byob-reader.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/abstract-ops/queuing-strategy.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/underlying-sink.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/writable-stream.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/abort-signal.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/writable-stream.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/stub/native.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/stub/dom-exception.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/pipe.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/default-controller.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream/tee.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/underlying-source.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/reader-options.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/iterator-options.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/pipe-options.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/readable-writable-pair.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/readable-stream.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy-init.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/byte-length-queuing-strategy.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/count-queuing-strategy.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/validators/transformer.ts","/Users/cory/ga_seir/portfolio/Cory_Benicak/client/node_modules/web-streams-polyfill/src/lib/transform-stream.ts"],"sourcesContent":["/// <reference lib=\"es2015.symbol\" />\n\nconst SymbolPolyfill: (description?: string) => symbol =\n  typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n    Symbol :\n    description => `Symbol(${description})` as any as symbol;\n\nexport default SymbolPolyfill;\n","/// <reference lib=\"dom\" />\n\nexport function noop(): undefined {\n  return undefined;\n}\n\nfunction getGlobals() {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n","import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nexport let AsyncIteratorPrototype: AsyncIterable<any> | undefined;\n\nif (typeof Symbol.asyncIterator === 'symbol') {\n  // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n  // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n  AsyncIteratorPrototype = {\n    // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    [Symbol.asyncIterator](this: AsyncIterator<any>) {\n      return this;\n    }\n  };\n  Object.defineProperty(AsyncIteratorPrototype, Symbol.asyncIterator, { enumerable: false });\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CanTransferArrayBuffer(O: ArrayBufferLike): boolean {\n  return true;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean {\n  return false;\n}\n\nexport function ArrayBufferSlice(buffer: ArrayBufferLike, begin: number, end: number): ArrayBufferLike {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n","import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: ArrayBufferView): Uint8Array {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  // try {\n  const buffer = TransferArrayBuffer(view.buffer);\n  // } catch (e) {\n  //   readIntoRequest._errorSteps(e);\n  //   return;\n  // }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n  }\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { AbortController, AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort();\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined =\n  typeof DOMException !== 'undefined' ? DOMException : undefined;\n","/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line no-redeclare\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n","import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  IsReadableStream,\n  ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(stream: ReadableStream<R>,\n                                            cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk1\n            );\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk2\n            );\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<Uint8Array> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<Uint8Array>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<Uint8Array> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: ArrayBufferView, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<Uint8Array>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<ArrayBufferView> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n","import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\ntry {\n  Object.defineProperty(byteLengthSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\ntry {\n  Object.defineProperty(countSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n","import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(\n    stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n    e\n  );\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n"]},"metadata":{},"sourceType":"script"}